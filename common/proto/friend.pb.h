// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: friend.proto
// Protobuf C++ Version: 5.29.3

#ifndef friend_2eproto_2epb_2eh
#define friend_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "base.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_friend_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_friend_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_friend_2eproto;
namespace im {
namespace friend_ {
class AddFriendRequest;
struct AddFriendRequestDefaultTypeInternal;
extern AddFriendRequestDefaultTypeInternal _AddFriendRequest_default_instance_;
class AddFriendResponse;
struct AddFriendResponseDefaultTypeInternal;
extern AddFriendResponseDefaultTypeInternal _AddFriendResponse_default_instance_;
class AddToBlacklistRequest;
struct AddToBlacklistRequestDefaultTypeInternal;
extern AddToBlacklistRequestDefaultTypeInternal _AddToBlacklistRequest_default_instance_;
class AddToBlacklistResponse;
struct AddToBlacklistResponseDefaultTypeInternal;
extern AddToBlacklistResponseDefaultTypeInternal _AddToBlacklistResponse_default_instance_;
class FriendInfo;
struct FriendInfoDefaultTypeInternal;
extern FriendInfoDefaultTypeInternal _FriendInfo_default_instance_;
class FriendRequest;
struct FriendRequestDefaultTypeInternal;
extern FriendRequestDefaultTypeInternal _FriendRequest_default_instance_;
class GetBlacklistRequest;
struct GetBlacklistRequestDefaultTypeInternal;
extern GetBlacklistRequestDefaultTypeInternal _GetBlacklistRequest_default_instance_;
class GetBlacklistResponse;
struct GetBlacklistResponseDefaultTypeInternal;
extern GetBlacklistResponseDefaultTypeInternal _GetBlacklistResponse_default_instance_;
class GetFriendListRequest;
struct GetFriendListRequestDefaultTypeInternal;
extern GetFriendListRequestDefaultTypeInternal _GetFriendListRequest_default_instance_;
class GetFriendListResponse;
struct GetFriendListResponseDefaultTypeInternal;
extern GetFriendListResponseDefaultTypeInternal _GetFriendListResponse_default_instance_;
class GetFriendRequestsRequest;
struct GetFriendRequestsRequestDefaultTypeInternal;
extern GetFriendRequestsRequestDefaultTypeInternal _GetFriendRequestsRequest_default_instance_;
class GetFriendRequestsResponse;
struct GetFriendRequestsResponseDefaultTypeInternal;
extern GetFriendRequestsResponseDefaultTypeInternal _GetFriendRequestsResponse_default_instance_;
class HandleFriendRequest;
struct HandleFriendRequestDefaultTypeInternal;
extern HandleFriendRequestDefaultTypeInternal _HandleFriendRequest_default_instance_;
class HandleFriendResponse;
struct HandleFriendResponseDefaultTypeInternal;
extern HandleFriendResponseDefaultTypeInternal _HandleFriendResponse_default_instance_;
class RemoveFromBlacklistRequest;
struct RemoveFromBlacklistRequestDefaultTypeInternal;
extern RemoveFromBlacklistRequestDefaultTypeInternal _RemoveFromBlacklistRequest_default_instance_;
class RemoveFromBlacklistResponse;
struct RemoveFromBlacklistResponseDefaultTypeInternal;
extern RemoveFromBlacklistResponseDefaultTypeInternal _RemoveFromBlacklistResponse_default_instance_;
}  // namespace friend_
}  // namespace im
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace im {
namespace friend_ {
enum FriendRequestStatus : int {
  PENDING = 0,
  ACCEPTED = 1,
  REJECTED = 2,
  FriendRequestStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  FriendRequestStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool FriendRequestStatus_IsValid(int value);
extern const uint32_t FriendRequestStatus_internal_data_[];
constexpr FriendRequestStatus FriendRequestStatus_MIN = static_cast<FriendRequestStatus>(0);
constexpr FriendRequestStatus FriendRequestStatus_MAX = static_cast<FriendRequestStatus>(2);
constexpr int FriendRequestStatus_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
FriendRequestStatus_descriptor();
template <typename T>
const std::string& FriendRequestStatus_Name(T value) {
  static_assert(std::is_same<T, FriendRequestStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to FriendRequestStatus_Name().");
  return FriendRequestStatus_Name(static_cast<FriendRequestStatus>(value));
}
template <>
inline const std::string& FriendRequestStatus_Name(FriendRequestStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<FriendRequestStatus_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool FriendRequestStatus_Parse(absl::string_view name, FriendRequestStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FriendRequestStatus>(
      FriendRequestStatus_descriptor(), name, value);
}
enum FriendPermission : int {
  NORMAL = 0,
  NO_CHAT = 1,
  NO_MOMENT = 2,
  STAR = 3,
  FriendPermission_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  FriendPermission_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool FriendPermission_IsValid(int value);
extern const uint32_t FriendPermission_internal_data_[];
constexpr FriendPermission FriendPermission_MIN = static_cast<FriendPermission>(0);
constexpr FriendPermission FriendPermission_MAX = static_cast<FriendPermission>(3);
constexpr int FriendPermission_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
FriendPermission_descriptor();
template <typename T>
const std::string& FriendPermission_Name(T value) {
  static_assert(std::is_same<T, FriendPermission>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to FriendPermission_Name().");
  return FriendPermission_Name(static_cast<FriendPermission>(value));
}
template <>
inline const std::string& FriendPermission_Name(FriendPermission value) {
  return ::google::protobuf::internal::NameOfDenseEnum<FriendPermission_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool FriendPermission_Parse(absl::string_view name, FriendPermission* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FriendPermission>(
      FriendPermission_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class FriendRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:im.friend.FriendRequest) */ {
 public:
  inline FriendRequest() : FriendRequest(nullptr) {}
  ~FriendRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FriendRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FriendRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FriendRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline FriendRequest(const FriendRequest& from) : FriendRequest(nullptr, from) {}
  inline FriendRequest(FriendRequest&& from) noexcept
      : FriendRequest(nullptr, std::move(from)) {}
  inline FriendRequest& operator=(const FriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendRequest& operator=(FriendRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendRequest* internal_default_instance() {
    return reinterpret_cast<const FriendRequest*>(
        &_FriendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(FriendRequest& a, FriendRequest& b) { a.Swap(&b); }
  inline void Swap(FriendRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FriendRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FriendRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FriendRequest& from) { FriendRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FriendRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "im.friend.FriendRequest"; }

 protected:
  explicit FriendRequest(::google::protobuf::Arena* arena);
  FriendRequest(::google::protobuf::Arena* arena, const FriendRequest& from);
  FriendRequest(::google::protobuf::Arena* arena, FriendRequest&& from) noexcept
      : FriendRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRequestIdFieldNumber = 1,
    kFromUidFieldNumber = 2,
    kToUidFieldNumber = 3,
    kMessageFieldNumber = 4,
    kCreateTimeFieldNumber = 6,
    kStatusFieldNumber = 5,
  };
  // string request_id = 1;
  void clear_request_id() ;
  const std::string& request_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_request_id(Arg_&& arg, Args_... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* value);

  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(
      const std::string& value);
  std::string* _internal_mutable_request_id();

  public:
  // string from_uid = 2;
  void clear_from_uid() ;
  const std::string& from_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_from_uid(Arg_&& arg, Args_... args);
  std::string* mutable_from_uid();
  PROTOBUF_NODISCARD std::string* release_from_uid();
  void set_allocated_from_uid(std::string* value);

  private:
  const std::string& _internal_from_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from_uid(
      const std::string& value);
  std::string* _internal_mutable_from_uid();

  public:
  // string to_uid = 3;
  void clear_to_uid() ;
  const std::string& to_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_to_uid(Arg_&& arg, Args_... args);
  std::string* mutable_to_uid();
  PROTOBUF_NODISCARD std::string* release_to_uid();
  void set_allocated_to_uid(std::string* value);

  private:
  const std::string& _internal_to_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_uid(
      const std::string& value);
  std::string* _internal_mutable_to_uid();

  public:
  // string message = 4;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // int64 create_time = 6;
  void clear_create_time() ;
  ::int64_t create_time() const;
  void set_create_time(::int64_t value);

  private:
  ::int64_t _internal_create_time() const;
  void _internal_set_create_time(::int64_t value);

  public:
  // .im.friend.FriendRequestStatus status = 5;
  void clear_status() ;
  ::im::friend_::FriendRequestStatus status() const;
  void set_status(::im::friend_::FriendRequestStatus value);

  private:
  ::im::friend_::FriendRequestStatus _internal_status() const;
  void _internal_set_status(::im::friend_::FriendRequestStatus value);

  public:
  // @@protoc_insertion_point(class_scope:im.friend.FriendRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      63, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FriendRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr request_id_;
    ::google::protobuf::internal::ArenaStringPtr from_uid_;
    ::google::protobuf::internal::ArenaStringPtr to_uid_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::int64_t create_time_;
    int status_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class FriendInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:im.friend.FriendInfo) */ {
 public:
  inline FriendInfo() : FriendInfo(nullptr) {}
  ~FriendInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FriendInfo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FriendInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FriendInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline FriendInfo(const FriendInfo& from) : FriendInfo(nullptr, from) {}
  inline FriendInfo(FriendInfo&& from) noexcept
      : FriendInfo(nullptr, std::move(from)) {}
  inline FriendInfo& operator=(const FriendInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendInfo& operator=(FriendInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendInfo* internal_default_instance() {
    return reinterpret_cast<const FriendInfo*>(
        &_FriendInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(FriendInfo& a, FriendInfo& b) { a.Swap(&b); }
  inline void Swap(FriendInfo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendInfo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FriendInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FriendInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FriendInfo& from) { FriendInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FriendInfo* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "im.friend.FriendInfo"; }

 protected:
  explicit FriendInfo(::google::protobuf::Arena* arena);
  FriendInfo(::google::protobuf::Arena* arena, const FriendInfo& from);
  FriendInfo(::google::protobuf::Arena* arena, FriendInfo&& from) noexcept
      : FriendInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPermissionsFieldNumber = 4,
    kUidFieldNumber = 1,
    kRemarkFieldNumber = 2,
    kAddTimeFieldNumber = 3,
  };
  // repeated .im.friend.FriendPermission permissions = 4;
  int permissions_size() const;
  private:
  int _internal_permissions_size() const;

  public:
  void clear_permissions() ;
  public:
  ::im::friend_::FriendPermission permissions(int index) const;
  void set_permissions(int index, ::im::friend_::FriendPermission value);
  void add_permissions(::im::friend_::FriendPermission value);
  const ::google::protobuf::RepeatedField<int>& permissions() const;
  ::google::protobuf::RepeatedField<int>* mutable_permissions();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_permissions() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_permissions();

  public:
  // string uid = 1;
  void clear_uid() ;
  const std::string& uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uid(Arg_&& arg, Args_... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* value);

  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(
      const std::string& value);
  std::string* _internal_mutable_uid();

  public:
  // string remark = 2;
  void clear_remark() ;
  const std::string& remark() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_remark(Arg_&& arg, Args_... args);
  std::string* mutable_remark();
  PROTOBUF_NODISCARD std::string* release_remark();
  void set_allocated_remark(std::string* value);

  private:
  const std::string& _internal_remark() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remark(
      const std::string& value);
  std::string* _internal_mutable_remark();

  public:
  // int64 add_time = 3;
  void clear_add_time() ;
  ::int64_t add_time() const;
  void set_add_time(::int64_t value);

  private:
  ::int64_t _internal_add_time() const;
  void _internal_set_add_time(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:im.friend.FriendInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      38, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FriendInfo& from_msg);
    ::google::protobuf::RepeatedField<int> permissions_;
    ::google::protobuf::internal::CachedSize _permissions_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr uid_;
    ::google::protobuf::internal::ArenaStringPtr remark_;
    ::int64_t add_time_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class RemoveFromBlacklistResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:im.friend.RemoveFromBlacklistResponse) */ {
 public:
  inline RemoveFromBlacklistResponse() : RemoveFromBlacklistResponse(nullptr) {}
  ~RemoveFromBlacklistResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RemoveFromBlacklistResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RemoveFromBlacklistResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RemoveFromBlacklistResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline RemoveFromBlacklistResponse(const RemoveFromBlacklistResponse& from) : RemoveFromBlacklistResponse(nullptr, from) {}
  inline RemoveFromBlacklistResponse(RemoveFromBlacklistResponse&& from) noexcept
      : RemoveFromBlacklistResponse(nullptr, std::move(from)) {}
  inline RemoveFromBlacklistResponse& operator=(const RemoveFromBlacklistResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveFromBlacklistResponse& operator=(RemoveFromBlacklistResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveFromBlacklistResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveFromBlacklistResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveFromBlacklistResponse*>(
        &_RemoveFromBlacklistResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(RemoveFromBlacklistResponse& a, RemoveFromBlacklistResponse& b) { a.Swap(&b); }
  inline void Swap(RemoveFromBlacklistResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveFromBlacklistResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveFromBlacklistResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RemoveFromBlacklistResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RemoveFromBlacklistResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RemoveFromBlacklistResponse& from) { RemoveFromBlacklistResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RemoveFromBlacklistResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "im.friend.RemoveFromBlacklistResponse"; }

 protected:
  explicit RemoveFromBlacklistResponse(::google::protobuf::Arena* arena);
  RemoveFromBlacklistResponse(::google::protobuf::Arena* arena, const RemoveFromBlacklistResponse& from);
  RemoveFromBlacklistResponse(::google::protobuf::Arena* arena, RemoveFromBlacklistResponse&& from) noexcept
      : RemoveFromBlacklistResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBaseFieldNumber = 1,
  };
  // .im.base.BaseResponse base = 1;
  bool has_base() const;
  void clear_base() ;
  const ::im::base::BaseResponse& base() const;
  PROTOBUF_NODISCARD ::im::base::BaseResponse* release_base();
  ::im::base::BaseResponse* mutable_base();
  void set_allocated_base(::im::base::BaseResponse* value);
  void unsafe_arena_set_allocated_base(::im::base::BaseResponse* value);
  ::im::base::BaseResponse* unsafe_arena_release_base();

  private:
  const ::im::base::BaseResponse& _internal_base() const;
  ::im::base::BaseResponse* _internal_mutable_base();

  public:
  // @@protoc_insertion_point(class_scope:im.friend.RemoveFromBlacklistResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RemoveFromBlacklistResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::im::base::BaseResponse* base_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class RemoveFromBlacklistRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:im.friend.RemoveFromBlacklistRequest) */ {
 public:
  inline RemoveFromBlacklistRequest() : RemoveFromBlacklistRequest(nullptr) {}
  ~RemoveFromBlacklistRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RemoveFromBlacklistRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RemoveFromBlacklistRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RemoveFromBlacklistRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline RemoveFromBlacklistRequest(const RemoveFromBlacklistRequest& from) : RemoveFromBlacklistRequest(nullptr, from) {}
  inline RemoveFromBlacklistRequest(RemoveFromBlacklistRequest&& from) noexcept
      : RemoveFromBlacklistRequest(nullptr, std::move(from)) {}
  inline RemoveFromBlacklistRequest& operator=(const RemoveFromBlacklistRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveFromBlacklistRequest& operator=(RemoveFromBlacklistRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveFromBlacklistRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveFromBlacklistRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveFromBlacklistRequest*>(
        &_RemoveFromBlacklistRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(RemoveFromBlacklistRequest& a, RemoveFromBlacklistRequest& b) { a.Swap(&b); }
  inline void Swap(RemoveFromBlacklistRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveFromBlacklistRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveFromBlacklistRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RemoveFromBlacklistRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RemoveFromBlacklistRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RemoveFromBlacklistRequest& from) { RemoveFromBlacklistRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RemoveFromBlacklistRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "im.friend.RemoveFromBlacklistRequest"; }

 protected:
  explicit RemoveFromBlacklistRequest(::google::protobuf::Arena* arena);
  RemoveFromBlacklistRequest(::google::protobuf::Arena* arena, const RemoveFromBlacklistRequest& from);
  RemoveFromBlacklistRequest(::google::protobuf::Arena* arena, RemoveFromBlacklistRequest&& from) noexcept
      : RemoveFromBlacklistRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTargetUidFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // string target_uid = 2;
  void clear_target_uid() ;
  const std::string& target_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_target_uid(Arg_&& arg, Args_... args);
  std::string* mutable_target_uid();
  PROTOBUF_NODISCARD std::string* release_target_uid();
  void set_allocated_target_uid(std::string* value);

  private:
  const std::string& _internal_target_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_uid(
      const std::string& value);
  std::string* _internal_mutable_target_uid();

  public:
  // .im.base.IMHeader header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::im::base::IMHeader& header() const;
  PROTOBUF_NODISCARD ::im::base::IMHeader* release_header();
  ::im::base::IMHeader* mutable_header();
  void set_allocated_header(::im::base::IMHeader* value);
  void unsafe_arena_set_allocated_header(::im::base::IMHeader* value);
  ::im::base::IMHeader* unsafe_arena_release_header();

  private:
  const ::im::base::IMHeader& _internal_header() const;
  ::im::base::IMHeader* _internal_mutable_header();

  public:
  // @@protoc_insertion_point(class_scope:im.friend.RemoveFromBlacklistRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      55, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RemoveFromBlacklistRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr target_uid_;
    ::im::base::IMHeader* header_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class HandleFriendResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:im.friend.HandleFriendResponse) */ {
 public:
  inline HandleFriendResponse() : HandleFriendResponse(nullptr) {}
  ~HandleFriendResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HandleFriendResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HandleFriendResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HandleFriendResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline HandleFriendResponse(const HandleFriendResponse& from) : HandleFriendResponse(nullptr, from) {}
  inline HandleFriendResponse(HandleFriendResponse&& from) noexcept
      : HandleFriendResponse(nullptr, std::move(from)) {}
  inline HandleFriendResponse& operator=(const HandleFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandleFriendResponse& operator=(HandleFriendResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HandleFriendResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HandleFriendResponse* internal_default_instance() {
    return reinterpret_cast<const HandleFriendResponse*>(
        &_HandleFriendResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(HandleFriendResponse& a, HandleFriendResponse& b) { a.Swap(&b); }
  inline void Swap(HandleFriendResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HandleFriendResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HandleFriendResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HandleFriendResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HandleFriendResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HandleFriendResponse& from) { HandleFriendResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HandleFriendResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "im.friend.HandleFriendResponse"; }

 protected:
  explicit HandleFriendResponse(::google::protobuf::Arena* arena);
  HandleFriendResponse(::google::protobuf::Arena* arena, const HandleFriendResponse& from);
  HandleFriendResponse(::google::protobuf::Arena* arena, HandleFriendResponse&& from) noexcept
      : HandleFriendResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBaseFieldNumber = 1,
  };
  // .im.base.BaseResponse base = 1;
  bool has_base() const;
  void clear_base() ;
  const ::im::base::BaseResponse& base() const;
  PROTOBUF_NODISCARD ::im::base::BaseResponse* release_base();
  ::im::base::BaseResponse* mutable_base();
  void set_allocated_base(::im::base::BaseResponse* value);
  void unsafe_arena_set_allocated_base(::im::base::BaseResponse* value);
  ::im::base::BaseResponse* unsafe_arena_release_base();

  private:
  const ::im::base::BaseResponse& _internal_base() const;
  ::im::base::BaseResponse* _internal_mutable_base();

  public:
  // @@protoc_insertion_point(class_scope:im.friend.HandleFriendResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HandleFriendResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::im::base::BaseResponse* base_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class HandleFriendRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:im.friend.HandleFriendRequest) */ {
 public:
  inline HandleFriendRequest() : HandleFriendRequest(nullptr) {}
  ~HandleFriendRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HandleFriendRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HandleFriendRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HandleFriendRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline HandleFriendRequest(const HandleFriendRequest& from) : HandleFriendRequest(nullptr, from) {}
  inline HandleFriendRequest(HandleFriendRequest&& from) noexcept
      : HandleFriendRequest(nullptr, std::move(from)) {}
  inline HandleFriendRequest& operator=(const HandleFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandleFriendRequest& operator=(HandleFriendRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HandleFriendRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HandleFriendRequest* internal_default_instance() {
    return reinterpret_cast<const HandleFriendRequest*>(
        &_HandleFriendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(HandleFriendRequest& a, HandleFriendRequest& b) { a.Swap(&b); }
  inline void Swap(HandleFriendRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HandleFriendRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HandleFriendRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HandleFriendRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HandleFriendRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HandleFriendRequest& from) { HandleFriendRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HandleFriendRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "im.friend.HandleFriendRequest"; }

 protected:
  explicit HandleFriendRequest(::google::protobuf::Arena* arena);
  HandleFriendRequest(::google::protobuf::Arena* arena, const HandleFriendRequest& from);
  HandleFriendRequest(::google::protobuf::Arena* arena, HandleFriendRequest&& from) noexcept
      : HandleFriendRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRequestIdFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kAcceptFieldNumber = 3,
  };
  // string request_id = 2;
  void clear_request_id() ;
  const std::string& request_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_request_id(Arg_&& arg, Args_... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* value);

  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(
      const std::string& value);
  std::string* _internal_mutable_request_id();

  public:
  // .im.base.IMHeader header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::im::base::IMHeader& header() const;
  PROTOBUF_NODISCARD ::im::base::IMHeader* release_header();
  ::im::base::IMHeader* mutable_header();
  void set_allocated_header(::im::base::IMHeader* value);
  void unsafe_arena_set_allocated_header(::im::base::IMHeader* value);
  ::im::base::IMHeader* unsafe_arena_release_header();

  private:
  const ::im::base::IMHeader& _internal_header() const;
  ::im::base::IMHeader* _internal_mutable_header();

  public:
  // bool accept = 3;
  void clear_accept() ;
  bool accept() const;
  void set_accept(bool value);

  private:
  bool _internal_accept() const;
  void _internal_set_accept(bool value);

  public:
  // @@protoc_insertion_point(class_scope:im.friend.HandleFriendRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      48, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HandleFriendRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr request_id_;
    ::im::base::IMHeader* header_;
    bool accept_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class GetFriendRequestsResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:im.friend.GetFriendRequestsResponse) */ {
 public:
  inline GetFriendRequestsResponse() : GetFriendRequestsResponse(nullptr) {}
  ~GetFriendRequestsResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetFriendRequestsResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetFriendRequestsResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetFriendRequestsResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetFriendRequestsResponse(const GetFriendRequestsResponse& from) : GetFriendRequestsResponse(nullptr, from) {}
  inline GetFriendRequestsResponse(GetFriendRequestsResponse&& from) noexcept
      : GetFriendRequestsResponse(nullptr, std::move(from)) {}
  inline GetFriendRequestsResponse& operator=(const GetFriendRequestsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFriendRequestsResponse& operator=(GetFriendRequestsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFriendRequestsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFriendRequestsResponse* internal_default_instance() {
    return reinterpret_cast<const GetFriendRequestsResponse*>(
        &_GetFriendRequestsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(GetFriendRequestsResponse& a, GetFriendRequestsResponse& b) { a.Swap(&b); }
  inline void Swap(GetFriendRequestsResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFriendRequestsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFriendRequestsResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetFriendRequestsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetFriendRequestsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetFriendRequestsResponse& from) { GetFriendRequestsResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetFriendRequestsResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "im.friend.GetFriendRequestsResponse"; }

 protected:
  explicit GetFriendRequestsResponse(::google::protobuf::Arena* arena);
  GetFriendRequestsResponse(::google::protobuf::Arena* arena, const GetFriendRequestsResponse& from);
  GetFriendRequestsResponse(::google::protobuf::Arena* arena, GetFriendRequestsResponse&& from) noexcept
      : GetFriendRequestsResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRequestsFieldNumber = 2,
    kBaseFieldNumber = 1,
  };
  // repeated .im.friend.FriendRequest requests = 2;
  int requests_size() const;
  private:
  int _internal_requests_size() const;

  public:
  void clear_requests() ;
  ::im::friend_::FriendRequest* mutable_requests(int index);
  ::google::protobuf::RepeatedPtrField<::im::friend_::FriendRequest>* mutable_requests();

  private:
  const ::google::protobuf::RepeatedPtrField<::im::friend_::FriendRequest>& _internal_requests() const;
  ::google::protobuf::RepeatedPtrField<::im::friend_::FriendRequest>* _internal_mutable_requests();
  public:
  const ::im::friend_::FriendRequest& requests(int index) const;
  ::im::friend_::FriendRequest* add_requests();
  const ::google::protobuf::RepeatedPtrField<::im::friend_::FriendRequest>& requests() const;
  // .im.base.BaseResponse base = 1;
  bool has_base() const;
  void clear_base() ;
  const ::im::base::BaseResponse& base() const;
  PROTOBUF_NODISCARD ::im::base::BaseResponse* release_base();
  ::im::base::BaseResponse* mutable_base();
  void set_allocated_base(::im::base::BaseResponse* value);
  void unsafe_arena_set_allocated_base(::im::base::BaseResponse* value);
  ::im::base::BaseResponse* unsafe_arena_release_base();

  private:
  const ::im::base::BaseResponse& _internal_base() const;
  ::im::base::BaseResponse* _internal_mutable_base();

  public:
  // @@protoc_insertion_point(class_scope:im.friend.GetFriendRequestsResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetFriendRequestsResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::im::friend_::FriendRequest > requests_;
    ::im::base::BaseResponse* base_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class GetFriendRequestsRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:im.friend.GetFriendRequestsRequest) */ {
 public:
  inline GetFriendRequestsRequest() : GetFriendRequestsRequest(nullptr) {}
  ~GetFriendRequestsRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetFriendRequestsRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetFriendRequestsRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetFriendRequestsRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetFriendRequestsRequest(const GetFriendRequestsRequest& from) : GetFriendRequestsRequest(nullptr, from) {}
  inline GetFriendRequestsRequest(GetFriendRequestsRequest&& from) noexcept
      : GetFriendRequestsRequest(nullptr, std::move(from)) {}
  inline GetFriendRequestsRequest& operator=(const GetFriendRequestsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFriendRequestsRequest& operator=(GetFriendRequestsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFriendRequestsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFriendRequestsRequest* internal_default_instance() {
    return reinterpret_cast<const GetFriendRequestsRequest*>(
        &_GetFriendRequestsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(GetFriendRequestsRequest& a, GetFriendRequestsRequest& b) { a.Swap(&b); }
  inline void Swap(GetFriendRequestsRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFriendRequestsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFriendRequestsRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetFriendRequestsRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetFriendRequestsRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetFriendRequestsRequest& from) { GetFriendRequestsRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetFriendRequestsRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "im.friend.GetFriendRequestsRequest"; }

 protected:
  explicit GetFriendRequestsRequest(::google::protobuf::Arena* arena);
  GetFriendRequestsRequest(::google::protobuf::Arena* arena, const GetFriendRequestsRequest& from);
  GetFriendRequestsRequest(::google::protobuf::Arena* arena, GetFriendRequestsRequest&& from) noexcept
      : GetFriendRequestsRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .im.base.IMHeader header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::im::base::IMHeader& header() const;
  PROTOBUF_NODISCARD ::im::base::IMHeader* release_header();
  ::im::base::IMHeader* mutable_header();
  void set_allocated_header(::im::base::IMHeader* value);
  void unsafe_arena_set_allocated_header(::im::base::IMHeader* value);
  ::im::base::IMHeader* unsafe_arena_release_header();

  private:
  const ::im::base::IMHeader& _internal_header() const;
  ::im::base::IMHeader* _internal_mutable_header();

  public:
  // @@protoc_insertion_point(class_scope:im.friend.GetFriendRequestsRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetFriendRequestsRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::im::base::IMHeader* header_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class GetFriendListResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:im.friend.GetFriendListResponse) */ {
 public:
  inline GetFriendListResponse() : GetFriendListResponse(nullptr) {}
  ~GetFriendListResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetFriendListResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetFriendListResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetFriendListResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetFriendListResponse(const GetFriendListResponse& from) : GetFriendListResponse(nullptr, from) {}
  inline GetFriendListResponse(GetFriendListResponse&& from) noexcept
      : GetFriendListResponse(nullptr, std::move(from)) {}
  inline GetFriendListResponse& operator=(const GetFriendListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFriendListResponse& operator=(GetFriendListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFriendListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFriendListResponse* internal_default_instance() {
    return reinterpret_cast<const GetFriendListResponse*>(
        &_GetFriendListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(GetFriendListResponse& a, GetFriendListResponse& b) { a.Swap(&b); }
  inline void Swap(GetFriendListResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFriendListResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFriendListResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetFriendListResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetFriendListResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetFriendListResponse& from) { GetFriendListResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetFriendListResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "im.friend.GetFriendListResponse"; }

 protected:
  explicit GetFriendListResponse(::google::protobuf::Arena* arena);
  GetFriendListResponse(::google::protobuf::Arena* arena, const GetFriendListResponse& from);
  GetFriendListResponse(::google::protobuf::Arena* arena, GetFriendListResponse&& from) noexcept
      : GetFriendListResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFriendsFieldNumber = 2,
    kBaseFieldNumber = 1,
  };
  // repeated .im.friend.FriendInfo friends = 2;
  int friends_size() const;
  private:
  int _internal_friends_size() const;

  public:
  void clear_friends() ;
  ::im::friend_::FriendInfo* mutable_friends(int index);
  ::google::protobuf::RepeatedPtrField<::im::friend_::FriendInfo>* mutable_friends();

  private:
  const ::google::protobuf::RepeatedPtrField<::im::friend_::FriendInfo>& _internal_friends() const;
  ::google::protobuf::RepeatedPtrField<::im::friend_::FriendInfo>* _internal_mutable_friends();
  public:
  const ::im::friend_::FriendInfo& friends(int index) const;
  ::im::friend_::FriendInfo* add_friends();
  const ::google::protobuf::RepeatedPtrField<::im::friend_::FriendInfo>& friends() const;
  // .im.base.BaseResponse base = 1;
  bool has_base() const;
  void clear_base() ;
  const ::im::base::BaseResponse& base() const;
  PROTOBUF_NODISCARD ::im::base::BaseResponse* release_base();
  ::im::base::BaseResponse* mutable_base();
  void set_allocated_base(::im::base::BaseResponse* value);
  void unsafe_arena_set_allocated_base(::im::base::BaseResponse* value);
  ::im::base::BaseResponse* unsafe_arena_release_base();

  private:
  const ::im::base::BaseResponse& _internal_base() const;
  ::im::base::BaseResponse* _internal_mutable_base();

  public:
  // @@protoc_insertion_point(class_scope:im.friend.GetFriendListResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetFriendListResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::im::friend_::FriendInfo > friends_;
    ::im::base::BaseResponse* base_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class GetFriendListRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:im.friend.GetFriendListRequest) */ {
 public:
  inline GetFriendListRequest() : GetFriendListRequest(nullptr) {}
  ~GetFriendListRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetFriendListRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetFriendListRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetFriendListRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetFriendListRequest(const GetFriendListRequest& from) : GetFriendListRequest(nullptr, from) {}
  inline GetFriendListRequest(GetFriendListRequest&& from) noexcept
      : GetFriendListRequest(nullptr, std::move(from)) {}
  inline GetFriendListRequest& operator=(const GetFriendListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFriendListRequest& operator=(GetFriendListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFriendListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFriendListRequest* internal_default_instance() {
    return reinterpret_cast<const GetFriendListRequest*>(
        &_GetFriendListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(GetFriendListRequest& a, GetFriendListRequest& b) { a.Swap(&b); }
  inline void Swap(GetFriendListRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFriendListRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFriendListRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetFriendListRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetFriendListRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetFriendListRequest& from) { GetFriendListRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetFriendListRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "im.friend.GetFriendListRequest"; }

 protected:
  explicit GetFriendListRequest(::google::protobuf::Arena* arena);
  GetFriendListRequest(::google::protobuf::Arena* arena, const GetFriendListRequest& from);
  GetFriendListRequest(::google::protobuf::Arena* arena, GetFriendListRequest&& from) noexcept
      : GetFriendListRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .im.base.IMHeader header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::im::base::IMHeader& header() const;
  PROTOBUF_NODISCARD ::im::base::IMHeader* release_header();
  ::im::base::IMHeader* mutable_header();
  void set_allocated_header(::im::base::IMHeader* value);
  void unsafe_arena_set_allocated_header(::im::base::IMHeader* value);
  ::im::base::IMHeader* unsafe_arena_release_header();

  private:
  const ::im::base::IMHeader& _internal_header() const;
  ::im::base::IMHeader* _internal_mutable_header();

  public:
  // @@protoc_insertion_point(class_scope:im.friend.GetFriendListRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetFriendListRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::im::base::IMHeader* header_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class GetBlacklistResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:im.friend.GetBlacklistResponse) */ {
 public:
  inline GetBlacklistResponse() : GetBlacklistResponse(nullptr) {}
  ~GetBlacklistResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetBlacklistResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetBlacklistResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetBlacklistResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetBlacklistResponse(const GetBlacklistResponse& from) : GetBlacklistResponse(nullptr, from) {}
  inline GetBlacklistResponse(GetBlacklistResponse&& from) noexcept
      : GetBlacklistResponse(nullptr, std::move(from)) {}
  inline GetBlacklistResponse& operator=(const GetBlacklistResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlacklistResponse& operator=(GetBlacklistResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBlacklistResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBlacklistResponse* internal_default_instance() {
    return reinterpret_cast<const GetBlacklistResponse*>(
        &_GetBlacklistResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(GetBlacklistResponse& a, GetBlacklistResponse& b) { a.Swap(&b); }
  inline void Swap(GetBlacklistResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlacklistResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBlacklistResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetBlacklistResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetBlacklistResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetBlacklistResponse& from) { GetBlacklistResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetBlacklistResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "im.friend.GetBlacklistResponse"; }

 protected:
  explicit GetBlacklistResponse(::google::protobuf::Arena* arena);
  GetBlacklistResponse(::google::protobuf::Arena* arena, const GetBlacklistResponse& from);
  GetBlacklistResponse(::google::protobuf::Arena* arena, GetBlacklistResponse&& from) noexcept
      : GetBlacklistResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBlackUidsFieldNumber = 2,
    kBaseFieldNumber = 1,
  };
  // repeated string black_uids = 2;
  int black_uids_size() const;
  private:
  int _internal_black_uids_size() const;

  public:
  void clear_black_uids() ;
  const std::string& black_uids(int index) const;
  std::string* mutable_black_uids(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_black_uids(int index, Arg_&& value, Args_... args);
  std::string* add_black_uids();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_black_uids(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& black_uids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_black_uids();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_black_uids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_black_uids();

  public:
  // .im.base.BaseResponse base = 1;
  bool has_base() const;
  void clear_base() ;
  const ::im::base::BaseResponse& base() const;
  PROTOBUF_NODISCARD ::im::base::BaseResponse* release_base();
  ::im::base::BaseResponse* mutable_base();
  void set_allocated_base(::im::base::BaseResponse* value);
  void unsafe_arena_set_allocated_base(::im::base::BaseResponse* value);
  ::im::base::BaseResponse* unsafe_arena_release_base();

  private:
  const ::im::base::BaseResponse& _internal_base() const;
  ::im::base::BaseResponse* _internal_mutable_base();

  public:
  // @@protoc_insertion_point(class_scope:im.friend.GetBlacklistResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      49, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetBlacklistResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> black_uids_;
    ::im::base::BaseResponse* base_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class GetBlacklistRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:im.friend.GetBlacklistRequest) */ {
 public:
  inline GetBlacklistRequest() : GetBlacklistRequest(nullptr) {}
  ~GetBlacklistRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetBlacklistRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetBlacklistRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetBlacklistRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetBlacklistRequest(const GetBlacklistRequest& from) : GetBlacklistRequest(nullptr, from) {}
  inline GetBlacklistRequest(GetBlacklistRequest&& from) noexcept
      : GetBlacklistRequest(nullptr, std::move(from)) {}
  inline GetBlacklistRequest& operator=(const GetBlacklistRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlacklistRequest& operator=(GetBlacklistRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBlacklistRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBlacklistRequest* internal_default_instance() {
    return reinterpret_cast<const GetBlacklistRequest*>(
        &_GetBlacklistRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(GetBlacklistRequest& a, GetBlacklistRequest& b) { a.Swap(&b); }
  inline void Swap(GetBlacklistRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlacklistRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBlacklistRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetBlacklistRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetBlacklistRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetBlacklistRequest& from) { GetBlacklistRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetBlacklistRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "im.friend.GetBlacklistRequest"; }

 protected:
  explicit GetBlacklistRequest(::google::protobuf::Arena* arena);
  GetBlacklistRequest(::google::protobuf::Arena* arena, const GetBlacklistRequest& from);
  GetBlacklistRequest(::google::protobuf::Arena* arena, GetBlacklistRequest&& from) noexcept
      : GetBlacklistRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .im.base.IMHeader header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::im::base::IMHeader& header() const;
  PROTOBUF_NODISCARD ::im::base::IMHeader* release_header();
  ::im::base::IMHeader* mutable_header();
  void set_allocated_header(::im::base::IMHeader* value);
  void unsafe_arena_set_allocated_header(::im::base::IMHeader* value);
  ::im::base::IMHeader* unsafe_arena_release_header();

  private:
  const ::im::base::IMHeader& _internal_header() const;
  ::im::base::IMHeader* _internal_mutable_header();

  public:
  // @@protoc_insertion_point(class_scope:im.friend.GetBlacklistRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetBlacklistRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::im::base::IMHeader* header_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class AddToBlacklistResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:im.friend.AddToBlacklistResponse) */ {
 public:
  inline AddToBlacklistResponse() : AddToBlacklistResponse(nullptr) {}
  ~AddToBlacklistResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AddToBlacklistResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AddToBlacklistResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AddToBlacklistResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline AddToBlacklistResponse(const AddToBlacklistResponse& from) : AddToBlacklistResponse(nullptr, from) {}
  inline AddToBlacklistResponse(AddToBlacklistResponse&& from) noexcept
      : AddToBlacklistResponse(nullptr, std::move(from)) {}
  inline AddToBlacklistResponse& operator=(const AddToBlacklistResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddToBlacklistResponse& operator=(AddToBlacklistResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddToBlacklistResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddToBlacklistResponse* internal_default_instance() {
    return reinterpret_cast<const AddToBlacklistResponse*>(
        &_AddToBlacklistResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(AddToBlacklistResponse& a, AddToBlacklistResponse& b) { a.Swap(&b); }
  inline void Swap(AddToBlacklistResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddToBlacklistResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddToBlacklistResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AddToBlacklistResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AddToBlacklistResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AddToBlacklistResponse& from) { AddToBlacklistResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AddToBlacklistResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "im.friend.AddToBlacklistResponse"; }

 protected:
  explicit AddToBlacklistResponse(::google::protobuf::Arena* arena);
  AddToBlacklistResponse(::google::protobuf::Arena* arena, const AddToBlacklistResponse& from);
  AddToBlacklistResponse(::google::protobuf::Arena* arena, AddToBlacklistResponse&& from) noexcept
      : AddToBlacklistResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBaseFieldNumber = 1,
  };
  // .im.base.BaseResponse base = 1;
  bool has_base() const;
  void clear_base() ;
  const ::im::base::BaseResponse& base() const;
  PROTOBUF_NODISCARD ::im::base::BaseResponse* release_base();
  ::im::base::BaseResponse* mutable_base();
  void set_allocated_base(::im::base::BaseResponse* value);
  void unsafe_arena_set_allocated_base(::im::base::BaseResponse* value);
  ::im::base::BaseResponse* unsafe_arena_release_base();

  private:
  const ::im::base::BaseResponse& _internal_base() const;
  ::im::base::BaseResponse* _internal_mutable_base();

  public:
  // @@protoc_insertion_point(class_scope:im.friend.AddToBlacklistResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AddToBlacklistResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::im::base::BaseResponse* base_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class AddToBlacklistRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:im.friend.AddToBlacklistRequest) */ {
 public:
  inline AddToBlacklistRequest() : AddToBlacklistRequest(nullptr) {}
  ~AddToBlacklistRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AddToBlacklistRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AddToBlacklistRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AddToBlacklistRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline AddToBlacklistRequest(const AddToBlacklistRequest& from) : AddToBlacklistRequest(nullptr, from) {}
  inline AddToBlacklistRequest(AddToBlacklistRequest&& from) noexcept
      : AddToBlacklistRequest(nullptr, std::move(from)) {}
  inline AddToBlacklistRequest& operator=(const AddToBlacklistRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddToBlacklistRequest& operator=(AddToBlacklistRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddToBlacklistRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddToBlacklistRequest* internal_default_instance() {
    return reinterpret_cast<const AddToBlacklistRequest*>(
        &_AddToBlacklistRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(AddToBlacklistRequest& a, AddToBlacklistRequest& b) { a.Swap(&b); }
  inline void Swap(AddToBlacklistRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddToBlacklistRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddToBlacklistRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AddToBlacklistRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AddToBlacklistRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AddToBlacklistRequest& from) { AddToBlacklistRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AddToBlacklistRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "im.friend.AddToBlacklistRequest"; }

 protected:
  explicit AddToBlacklistRequest(::google::protobuf::Arena* arena);
  AddToBlacklistRequest(::google::protobuf::Arena* arena, const AddToBlacklistRequest& from);
  AddToBlacklistRequest(::google::protobuf::Arena* arena, AddToBlacklistRequest&& from) noexcept
      : AddToBlacklistRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTargetUidFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // string target_uid = 2;
  void clear_target_uid() ;
  const std::string& target_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_target_uid(Arg_&& arg, Args_... args);
  std::string* mutable_target_uid();
  PROTOBUF_NODISCARD std::string* release_target_uid();
  void set_allocated_target_uid(std::string* value);

  private:
  const std::string& _internal_target_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_uid(
      const std::string& value);
  std::string* _internal_mutable_target_uid();

  public:
  // .im.base.IMHeader header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::im::base::IMHeader& header() const;
  PROTOBUF_NODISCARD ::im::base::IMHeader* release_header();
  ::im::base::IMHeader* mutable_header();
  void set_allocated_header(::im::base::IMHeader* value);
  void unsafe_arena_set_allocated_header(::im::base::IMHeader* value);
  ::im::base::IMHeader* unsafe_arena_release_header();

  private:
  const ::im::base::IMHeader& _internal_header() const;
  ::im::base::IMHeader* _internal_mutable_header();

  public:
  // @@protoc_insertion_point(class_scope:im.friend.AddToBlacklistRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      50, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AddToBlacklistRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr target_uid_;
    ::im::base::IMHeader* header_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class AddFriendResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:im.friend.AddFriendResponse) */ {
 public:
  inline AddFriendResponse() : AddFriendResponse(nullptr) {}
  ~AddFriendResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AddFriendResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AddFriendResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AddFriendResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline AddFriendResponse(const AddFriendResponse& from) : AddFriendResponse(nullptr, from) {}
  inline AddFriendResponse(AddFriendResponse&& from) noexcept
      : AddFriendResponse(nullptr, std::move(from)) {}
  inline AddFriendResponse& operator=(const AddFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFriendResponse& operator=(AddFriendResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddFriendResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddFriendResponse* internal_default_instance() {
    return reinterpret_cast<const AddFriendResponse*>(
        &_AddFriendResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(AddFriendResponse& a, AddFriendResponse& b) { a.Swap(&b); }
  inline void Swap(AddFriendResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddFriendResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddFriendResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AddFriendResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AddFriendResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AddFriendResponse& from) { AddFriendResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AddFriendResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "im.friend.AddFriendResponse"; }

 protected:
  explicit AddFriendResponse(::google::protobuf::Arena* arena);
  AddFriendResponse(::google::protobuf::Arena* arena, const AddFriendResponse& from);
  AddFriendResponse(::google::protobuf::Arena* arena, AddFriendResponse&& from) noexcept
      : AddFriendResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBaseFieldNumber = 1,
    kRequestFieldNumber = 2,
  };
  // .im.base.BaseResponse base = 1;
  bool has_base() const;
  void clear_base() ;
  const ::im::base::BaseResponse& base() const;
  PROTOBUF_NODISCARD ::im::base::BaseResponse* release_base();
  ::im::base::BaseResponse* mutable_base();
  void set_allocated_base(::im::base::BaseResponse* value);
  void unsafe_arena_set_allocated_base(::im::base::BaseResponse* value);
  ::im::base::BaseResponse* unsafe_arena_release_base();

  private:
  const ::im::base::BaseResponse& _internal_base() const;
  ::im::base::BaseResponse* _internal_mutable_base();

  public:
  // .im.friend.FriendRequest request = 2;
  bool has_request() const;
  void clear_request() ;
  const ::im::friend_::FriendRequest& request() const;
  PROTOBUF_NODISCARD ::im::friend_::FriendRequest* release_request();
  ::im::friend_::FriendRequest* mutable_request();
  void set_allocated_request(::im::friend_::FriendRequest* value);
  void unsafe_arena_set_allocated_request(::im::friend_::FriendRequest* value);
  ::im::friend_::FriendRequest* unsafe_arena_release_request();

  private:
  const ::im::friend_::FriendRequest& _internal_request() const;
  ::im::friend_::FriendRequest* _internal_mutable_request();

  public:
  // @@protoc_insertion_point(class_scope:im.friend.AddFriendResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AddFriendResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::im::base::BaseResponse* base_;
    ::im::friend_::FriendRequest* request_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class AddFriendRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:im.friend.AddFriendRequest) */ {
 public:
  inline AddFriendRequest() : AddFriendRequest(nullptr) {}
  ~AddFriendRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AddFriendRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AddFriendRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AddFriendRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline AddFriendRequest(const AddFriendRequest& from) : AddFriendRequest(nullptr, from) {}
  inline AddFriendRequest(AddFriendRequest&& from) noexcept
      : AddFriendRequest(nullptr, std::move(from)) {}
  inline AddFriendRequest& operator=(const AddFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFriendRequest& operator=(AddFriendRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddFriendRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddFriendRequest* internal_default_instance() {
    return reinterpret_cast<const AddFriendRequest*>(
        &_AddFriendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(AddFriendRequest& a, AddFriendRequest& b) { a.Swap(&b); }
  inline void Swap(AddFriendRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddFriendRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddFriendRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AddFriendRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AddFriendRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AddFriendRequest& from) { AddFriendRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AddFriendRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "im.friend.AddFriendRequest"; }

 protected:
  explicit AddFriendRequest(::google::protobuf::Arena* arena);
  AddFriendRequest(::google::protobuf::Arena* arena, const AddFriendRequest& from);
  AddFriendRequest(::google::protobuf::Arena* arena, AddFriendRequest&& from) noexcept
      : AddFriendRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kToUidFieldNumber = 2,
    kMessageFieldNumber = 3,
    kHeaderFieldNumber = 1,
  };
  // string to_uid = 2;
  void clear_to_uid() ;
  const std::string& to_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_to_uid(Arg_&& arg, Args_... args);
  std::string* mutable_to_uid();
  PROTOBUF_NODISCARD std::string* release_to_uid();
  void set_allocated_to_uid(std::string* value);

  private:
  const std::string& _internal_to_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_uid(
      const std::string& value);
  std::string* _internal_mutable_to_uid();

  public:
  // string message = 3;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // .im.base.IMHeader header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::im::base::IMHeader& header() const;
  PROTOBUF_NODISCARD ::im::base::IMHeader* release_header();
  ::im::base::IMHeader* mutable_header();
  void set_allocated_header(::im::base::IMHeader* value);
  void unsafe_arena_set_allocated_header(::im::base::IMHeader* value);
  ::im::base::IMHeader* unsafe_arena_release_header();

  private:
  const ::im::base::IMHeader& _internal_header() const;
  ::im::base::IMHeader* _internal_mutable_header();

  public:
  // @@protoc_insertion_point(class_scope:im.friend.AddFriendRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      48, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AddFriendRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr to_uid_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::im::base::IMHeader* header_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friend_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// FriendInfo

// string uid = 1;
inline void FriendInfo::clear_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uid_.ClearToEmpty();
}
inline const std::string& FriendInfo::uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.friend.FriendInfo.uid)
  return _internal_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FriendInfo::set_uid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:im.friend.FriendInfo.uid)
}
inline std::string* FriendInfo::mutable_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:im.friend.FriendInfo.uid)
  return _s;
}
inline const std::string& FriendInfo::_internal_uid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.uid_.Get();
}
inline void FriendInfo::_internal_set_uid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uid_.Set(value, GetArena());
}
inline std::string* FriendInfo::_internal_mutable_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.uid_.Mutable( GetArena());
}
inline std::string* FriendInfo::release_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.friend.FriendInfo.uid)
  return _impl_.uid_.Release();
}
inline void FriendInfo::set_allocated_uid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.uid_.IsDefault()) {
    _impl_.uid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:im.friend.FriendInfo.uid)
}

// string remark = 2;
inline void FriendInfo::clear_remark() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.remark_.ClearToEmpty();
}
inline const std::string& FriendInfo::remark() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.friend.FriendInfo.remark)
  return _internal_remark();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FriendInfo::set_remark(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.remark_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:im.friend.FriendInfo.remark)
}
inline std::string* FriendInfo::mutable_remark() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_remark();
  // @@protoc_insertion_point(field_mutable:im.friend.FriendInfo.remark)
  return _s;
}
inline const std::string& FriendInfo::_internal_remark() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.remark_.Get();
}
inline void FriendInfo::_internal_set_remark(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.remark_.Set(value, GetArena());
}
inline std::string* FriendInfo::_internal_mutable_remark() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.remark_.Mutable( GetArena());
}
inline std::string* FriendInfo::release_remark() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.friend.FriendInfo.remark)
  return _impl_.remark_.Release();
}
inline void FriendInfo::set_allocated_remark(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.remark_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.remark_.IsDefault()) {
    _impl_.remark_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:im.friend.FriendInfo.remark)
}

// int64 add_time = 3;
inline void FriendInfo::clear_add_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.add_time_ = ::int64_t{0};
}
inline ::int64_t FriendInfo::add_time() const {
  // @@protoc_insertion_point(field_get:im.friend.FriendInfo.add_time)
  return _internal_add_time();
}
inline void FriendInfo::set_add_time(::int64_t value) {
  _internal_set_add_time(value);
  // @@protoc_insertion_point(field_set:im.friend.FriendInfo.add_time)
}
inline ::int64_t FriendInfo::_internal_add_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.add_time_;
}
inline void FriendInfo::_internal_set_add_time(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.add_time_ = value;
}

// repeated .im.friend.FriendPermission permissions = 4;
inline int FriendInfo::_internal_permissions_size() const {
  return _internal_permissions().size();
}
inline int FriendInfo::permissions_size() const {
  return _internal_permissions_size();
}
inline void FriendInfo::clear_permissions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.permissions_.Clear();
}
inline ::im::friend_::FriendPermission FriendInfo::permissions(int index) const {
  // @@protoc_insertion_point(field_get:im.friend.FriendInfo.permissions)
  return static_cast<::im::friend_::FriendPermission>(_internal_permissions().Get(index));
}
inline void FriendInfo::set_permissions(int index, ::im::friend_::FriendPermission value) {
  _internal_mutable_permissions()->Set(index, value);
  // @@protoc_insertion_point(field_set:im.friend.FriendInfo.permissions)
}
inline void FriendInfo::add_permissions(::im::friend_::FriendPermission value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_permissions()->Add(value);
  // @@protoc_insertion_point(field_add:im.friend.FriendInfo.permissions)
}
inline const ::google::protobuf::RepeatedField<int>& FriendInfo::permissions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:im.friend.FriendInfo.permissions)
  return _internal_permissions();
}
inline ::google::protobuf::RepeatedField<int>* FriendInfo::mutable_permissions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:im.friend.FriendInfo.permissions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_permissions();
}
inline const ::google::protobuf::RepeatedField<int>& FriendInfo::_internal_permissions()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.permissions_;
}
inline ::google::protobuf::RepeatedField<int>* FriendInfo::_internal_mutable_permissions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.permissions_;
}

// -------------------------------------------------------------------

// FriendRequest

// string request_id = 1;
inline void FriendRequest::clear_request_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_.ClearToEmpty();
}
inline const std::string& FriendRequest::request_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.friend.FriendRequest.request_id)
  return _internal_request_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FriendRequest::set_request_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:im.friend.FriendRequest.request_id)
}
inline std::string* FriendRequest::mutable_request_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:im.friend.FriendRequest.request_id)
  return _s;
}
inline const std::string& FriendRequest::_internal_request_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.request_id_.Get();
}
inline void FriendRequest::_internal_set_request_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_.Set(value, GetArena());
}
inline std::string* FriendRequest::_internal_mutable_request_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.request_id_.Mutable( GetArena());
}
inline std::string* FriendRequest::release_request_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.friend.FriendRequest.request_id)
  return _impl_.request_id_.Release();
}
inline void FriendRequest::set_allocated_request_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.request_id_.IsDefault()) {
    _impl_.request_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:im.friend.FriendRequest.request_id)
}

// string from_uid = 2;
inline void FriendRequest::clear_from_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_uid_.ClearToEmpty();
}
inline const std::string& FriendRequest::from_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.friend.FriendRequest.from_uid)
  return _internal_from_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FriendRequest::set_from_uid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:im.friend.FriendRequest.from_uid)
}
inline std::string* FriendRequest::mutable_from_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_from_uid();
  // @@protoc_insertion_point(field_mutable:im.friend.FriendRequest.from_uid)
  return _s;
}
inline const std::string& FriendRequest::_internal_from_uid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.from_uid_.Get();
}
inline void FriendRequest::_internal_set_from_uid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_uid_.Set(value, GetArena());
}
inline std::string* FriendRequest::_internal_mutable_from_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.from_uid_.Mutable( GetArena());
}
inline std::string* FriendRequest::release_from_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.friend.FriendRequest.from_uid)
  return _impl_.from_uid_.Release();
}
inline void FriendRequest::set_allocated_from_uid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_uid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.from_uid_.IsDefault()) {
    _impl_.from_uid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:im.friend.FriendRequest.from_uid)
}

// string to_uid = 3;
inline void FriendRequest::clear_to_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_uid_.ClearToEmpty();
}
inline const std::string& FriendRequest::to_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.friend.FriendRequest.to_uid)
  return _internal_to_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FriendRequest::set_to_uid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:im.friend.FriendRequest.to_uid)
}
inline std::string* FriendRequest::mutable_to_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_to_uid();
  // @@protoc_insertion_point(field_mutable:im.friend.FriendRequest.to_uid)
  return _s;
}
inline const std::string& FriendRequest::_internal_to_uid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.to_uid_.Get();
}
inline void FriendRequest::_internal_set_to_uid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_uid_.Set(value, GetArena());
}
inline std::string* FriendRequest::_internal_mutable_to_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.to_uid_.Mutable( GetArena());
}
inline std::string* FriendRequest::release_to_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.friend.FriendRequest.to_uid)
  return _impl_.to_uid_.Release();
}
inline void FriendRequest::set_allocated_to_uid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_uid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.to_uid_.IsDefault()) {
    _impl_.to_uid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:im.friend.FriendRequest.to_uid)
}

// string message = 4;
inline void FriendRequest::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& FriendRequest::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.friend.FriendRequest.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FriendRequest::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:im.friend.FriendRequest.message)
}
inline std::string* FriendRequest::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:im.friend.FriendRequest.message)
  return _s;
}
inline const std::string& FriendRequest::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void FriendRequest::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* FriendRequest::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* FriendRequest::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.friend.FriendRequest.message)
  return _impl_.message_.Release();
}
inline void FriendRequest::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:im.friend.FriendRequest.message)
}

// .im.friend.FriendRequestStatus status = 5;
inline void FriendRequest::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
}
inline ::im::friend_::FriendRequestStatus FriendRequest::status() const {
  // @@protoc_insertion_point(field_get:im.friend.FriendRequest.status)
  return _internal_status();
}
inline void FriendRequest::set_status(::im::friend_::FriendRequestStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:im.friend.FriendRequest.status)
}
inline ::im::friend_::FriendRequestStatus FriendRequest::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::im::friend_::FriendRequestStatus>(_impl_.status_);
}
inline void FriendRequest::_internal_set_status(::im::friend_::FriendRequestStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// int64 create_time = 6;
inline void FriendRequest::clear_create_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.create_time_ = ::int64_t{0};
}
inline ::int64_t FriendRequest::create_time() const {
  // @@protoc_insertion_point(field_get:im.friend.FriendRequest.create_time)
  return _internal_create_time();
}
inline void FriendRequest::set_create_time(::int64_t value) {
  _internal_set_create_time(value);
  // @@protoc_insertion_point(field_set:im.friend.FriendRequest.create_time)
}
inline ::int64_t FriendRequest::_internal_create_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.create_time_;
}
inline void FriendRequest::_internal_set_create_time(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.create_time_ = value;
}

// -------------------------------------------------------------------

// AddFriendRequest

// .im.base.IMHeader header = 1;
inline bool AddFriendRequest::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::im::base::IMHeader& AddFriendRequest::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::im::base::IMHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::base::IMHeader&>(::im::base::_IMHeader_default_instance_);
}
inline const ::im::base::IMHeader& AddFriendRequest::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.friend.AddFriendRequest.header)
  return _internal_header();
}
inline void AddFriendRequest::unsafe_arena_set_allocated_header(::im::base::IMHeader* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::im::base::IMHeader*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.friend.AddFriendRequest.header)
}
inline ::im::base::IMHeader* AddFriendRequest::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::IMHeader* released = _impl_.header_;
  _impl_.header_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::im::base::IMHeader* AddFriendRequest::unsafe_arena_release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.friend.AddFriendRequest.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::IMHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::im::base::IMHeader* AddFriendRequest::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::im::base::IMHeader>(GetArena());
    _impl_.header_ = reinterpret_cast<::im::base::IMHeader*>(p);
  }
  return _impl_.header_;
}
inline ::im::base::IMHeader* AddFriendRequest::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::im::base::IMHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:im.friend.AddFriendRequest.header)
  return _msg;
}
inline void AddFriendRequest::set_allocated_header(::im::base::IMHeader* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::im::base::IMHeader*>(value);
  // @@protoc_insertion_point(field_set_allocated:im.friend.AddFriendRequest.header)
}

// string to_uid = 2;
inline void AddFriendRequest::clear_to_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_uid_.ClearToEmpty();
}
inline const std::string& AddFriendRequest::to_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.friend.AddFriendRequest.to_uid)
  return _internal_to_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddFriendRequest::set_to_uid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:im.friend.AddFriendRequest.to_uid)
}
inline std::string* AddFriendRequest::mutable_to_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_to_uid();
  // @@protoc_insertion_point(field_mutable:im.friend.AddFriendRequest.to_uid)
  return _s;
}
inline const std::string& AddFriendRequest::_internal_to_uid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.to_uid_.Get();
}
inline void AddFriendRequest::_internal_set_to_uid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_uid_.Set(value, GetArena());
}
inline std::string* AddFriendRequest::_internal_mutable_to_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.to_uid_.Mutable( GetArena());
}
inline std::string* AddFriendRequest::release_to_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.friend.AddFriendRequest.to_uid)
  return _impl_.to_uid_.Release();
}
inline void AddFriendRequest::set_allocated_to_uid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_uid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.to_uid_.IsDefault()) {
    _impl_.to_uid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:im.friend.AddFriendRequest.to_uid)
}

// string message = 3;
inline void AddFriendRequest::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& AddFriendRequest::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.friend.AddFriendRequest.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddFriendRequest::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:im.friend.AddFriendRequest.message)
}
inline std::string* AddFriendRequest::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:im.friend.AddFriendRequest.message)
  return _s;
}
inline const std::string& AddFriendRequest::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void AddFriendRequest::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* AddFriendRequest::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* AddFriendRequest::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.friend.AddFriendRequest.message)
  return _impl_.message_.Release();
}
inline void AddFriendRequest::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:im.friend.AddFriendRequest.message)
}

// -------------------------------------------------------------------

// AddFriendResponse

// .im.base.BaseResponse base = 1;
inline bool AddFriendResponse::has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline const ::im::base::BaseResponse& AddFriendResponse::_internal_base() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::im::base::BaseResponse* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::base::BaseResponse&>(::im::base::_BaseResponse_default_instance_);
}
inline const ::im::base::BaseResponse& AddFriendResponse::base() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.friend.AddFriendResponse.base)
  return _internal_base();
}
inline void AddFriendResponse::unsafe_arena_set_allocated_base(::im::base::BaseResponse* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = reinterpret_cast<::im::base::BaseResponse*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.friend.AddFriendResponse.base)
}
inline ::im::base::BaseResponse* AddFriendResponse::release_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::BaseResponse* released = _impl_.base_;
  _impl_.base_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::im::base::BaseResponse* AddFriendResponse::unsafe_arena_release_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.friend.AddFriendResponse.base)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::BaseResponse* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::im::base::BaseResponse* AddFriendResponse::_internal_mutable_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.base_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::im::base::BaseResponse>(GetArena());
    _impl_.base_ = reinterpret_cast<::im::base::BaseResponse*>(p);
  }
  return _impl_.base_;
}
inline ::im::base::BaseResponse* AddFriendResponse::mutable_base() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::im::base::BaseResponse* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:im.friend.AddFriendResponse.base)
  return _msg;
}
inline void AddFriendResponse::set_allocated_base(::im::base::BaseResponse* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.base_ = reinterpret_cast<::im::base::BaseResponse*>(value);
  // @@protoc_insertion_point(field_set_allocated:im.friend.AddFriendResponse.base)
}

// .im.friend.FriendRequest request = 2;
inline bool AddFriendResponse::has_request() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.request_ != nullptr);
  return value;
}
inline void AddFriendResponse::clear_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.request_ != nullptr) _impl_.request_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::im::friend_::FriendRequest& AddFriendResponse::_internal_request() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::im::friend_::FriendRequest* p = _impl_.request_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::friend_::FriendRequest&>(::im::friend_::_FriendRequest_default_instance_);
}
inline const ::im::friend_::FriendRequest& AddFriendResponse::request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.friend.AddFriendResponse.request)
  return _internal_request();
}
inline void AddFriendResponse::unsafe_arena_set_allocated_request(::im::friend_::FriendRequest* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.request_);
  }
  _impl_.request_ = reinterpret_cast<::im::friend_::FriendRequest*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.friend.AddFriendResponse.request)
}
inline ::im::friend_::FriendRequest* AddFriendResponse::release_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::im::friend_::FriendRequest* released = _impl_.request_;
  _impl_.request_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::im::friend_::FriendRequest* AddFriendResponse::unsafe_arena_release_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.friend.AddFriendResponse.request)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::im::friend_::FriendRequest* temp = _impl_.request_;
  _impl_.request_ = nullptr;
  return temp;
}
inline ::im::friend_::FriendRequest* AddFriendResponse::_internal_mutable_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.request_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::im::friend_::FriendRequest>(GetArena());
    _impl_.request_ = reinterpret_cast<::im::friend_::FriendRequest*>(p);
  }
  return _impl_.request_;
}
inline ::im::friend_::FriendRequest* AddFriendResponse::mutable_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::im::friend_::FriendRequest* _msg = _internal_mutable_request();
  // @@protoc_insertion_point(field_mutable:im.friend.AddFriendResponse.request)
  return _msg;
}
inline void AddFriendResponse::set_allocated_request(::im::friend_::FriendRequest* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.request_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.request_ = reinterpret_cast<::im::friend_::FriendRequest*>(value);
  // @@protoc_insertion_point(field_set_allocated:im.friend.AddFriendResponse.request)
}

// -------------------------------------------------------------------

// HandleFriendRequest

// .im.base.IMHeader header = 1;
inline bool HandleFriendRequest::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::im::base::IMHeader& HandleFriendRequest::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::im::base::IMHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::base::IMHeader&>(::im::base::_IMHeader_default_instance_);
}
inline const ::im::base::IMHeader& HandleFriendRequest::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.friend.HandleFriendRequest.header)
  return _internal_header();
}
inline void HandleFriendRequest::unsafe_arena_set_allocated_header(::im::base::IMHeader* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::im::base::IMHeader*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.friend.HandleFriendRequest.header)
}
inline ::im::base::IMHeader* HandleFriendRequest::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::IMHeader* released = _impl_.header_;
  _impl_.header_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::im::base::IMHeader* HandleFriendRequest::unsafe_arena_release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.friend.HandleFriendRequest.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::IMHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::im::base::IMHeader* HandleFriendRequest::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::im::base::IMHeader>(GetArena());
    _impl_.header_ = reinterpret_cast<::im::base::IMHeader*>(p);
  }
  return _impl_.header_;
}
inline ::im::base::IMHeader* HandleFriendRequest::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::im::base::IMHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:im.friend.HandleFriendRequest.header)
  return _msg;
}
inline void HandleFriendRequest::set_allocated_header(::im::base::IMHeader* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::im::base::IMHeader*>(value);
  // @@protoc_insertion_point(field_set_allocated:im.friend.HandleFriendRequest.header)
}

// string request_id = 2;
inline void HandleFriendRequest::clear_request_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_.ClearToEmpty();
}
inline const std::string& HandleFriendRequest::request_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.friend.HandleFriendRequest.request_id)
  return _internal_request_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HandleFriendRequest::set_request_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:im.friend.HandleFriendRequest.request_id)
}
inline std::string* HandleFriendRequest::mutable_request_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:im.friend.HandleFriendRequest.request_id)
  return _s;
}
inline const std::string& HandleFriendRequest::_internal_request_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.request_id_.Get();
}
inline void HandleFriendRequest::_internal_set_request_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_.Set(value, GetArena());
}
inline std::string* HandleFriendRequest::_internal_mutable_request_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.request_id_.Mutable( GetArena());
}
inline std::string* HandleFriendRequest::release_request_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.friend.HandleFriendRequest.request_id)
  return _impl_.request_id_.Release();
}
inline void HandleFriendRequest::set_allocated_request_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.request_id_.IsDefault()) {
    _impl_.request_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:im.friend.HandleFriendRequest.request_id)
}

// bool accept = 3;
inline void HandleFriendRequest::clear_accept() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accept_ = false;
}
inline bool HandleFriendRequest::accept() const {
  // @@protoc_insertion_point(field_get:im.friend.HandleFriendRequest.accept)
  return _internal_accept();
}
inline void HandleFriendRequest::set_accept(bool value) {
  _internal_set_accept(value);
  // @@protoc_insertion_point(field_set:im.friend.HandleFriendRequest.accept)
}
inline bool HandleFriendRequest::_internal_accept() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.accept_;
}
inline void HandleFriendRequest::_internal_set_accept(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accept_ = value;
}

// -------------------------------------------------------------------

// HandleFriendResponse

// .im.base.BaseResponse base = 1;
inline bool HandleFriendResponse::has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline const ::im::base::BaseResponse& HandleFriendResponse::_internal_base() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::im::base::BaseResponse* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::base::BaseResponse&>(::im::base::_BaseResponse_default_instance_);
}
inline const ::im::base::BaseResponse& HandleFriendResponse::base() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.friend.HandleFriendResponse.base)
  return _internal_base();
}
inline void HandleFriendResponse::unsafe_arena_set_allocated_base(::im::base::BaseResponse* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = reinterpret_cast<::im::base::BaseResponse*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.friend.HandleFriendResponse.base)
}
inline ::im::base::BaseResponse* HandleFriendResponse::release_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::BaseResponse* released = _impl_.base_;
  _impl_.base_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::im::base::BaseResponse* HandleFriendResponse::unsafe_arena_release_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.friend.HandleFriendResponse.base)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::BaseResponse* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::im::base::BaseResponse* HandleFriendResponse::_internal_mutable_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.base_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::im::base::BaseResponse>(GetArena());
    _impl_.base_ = reinterpret_cast<::im::base::BaseResponse*>(p);
  }
  return _impl_.base_;
}
inline ::im::base::BaseResponse* HandleFriendResponse::mutable_base() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::im::base::BaseResponse* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:im.friend.HandleFriendResponse.base)
  return _msg;
}
inline void HandleFriendResponse::set_allocated_base(::im::base::BaseResponse* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.base_ = reinterpret_cast<::im::base::BaseResponse*>(value);
  // @@protoc_insertion_point(field_set_allocated:im.friend.HandleFriendResponse.base)
}

// -------------------------------------------------------------------

// GetFriendListRequest

// .im.base.IMHeader header = 1;
inline bool GetFriendListRequest::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::im::base::IMHeader& GetFriendListRequest::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::im::base::IMHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::base::IMHeader&>(::im::base::_IMHeader_default_instance_);
}
inline const ::im::base::IMHeader& GetFriendListRequest::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.friend.GetFriendListRequest.header)
  return _internal_header();
}
inline void GetFriendListRequest::unsafe_arena_set_allocated_header(::im::base::IMHeader* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::im::base::IMHeader*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.friend.GetFriendListRequest.header)
}
inline ::im::base::IMHeader* GetFriendListRequest::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::IMHeader* released = _impl_.header_;
  _impl_.header_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::im::base::IMHeader* GetFriendListRequest::unsafe_arena_release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.friend.GetFriendListRequest.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::IMHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::im::base::IMHeader* GetFriendListRequest::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::im::base::IMHeader>(GetArena());
    _impl_.header_ = reinterpret_cast<::im::base::IMHeader*>(p);
  }
  return _impl_.header_;
}
inline ::im::base::IMHeader* GetFriendListRequest::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::im::base::IMHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:im.friend.GetFriendListRequest.header)
  return _msg;
}
inline void GetFriendListRequest::set_allocated_header(::im::base::IMHeader* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::im::base::IMHeader*>(value);
  // @@protoc_insertion_point(field_set_allocated:im.friend.GetFriendListRequest.header)
}

// -------------------------------------------------------------------

// GetFriendListResponse

// .im.base.BaseResponse base = 1;
inline bool GetFriendListResponse::has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline const ::im::base::BaseResponse& GetFriendListResponse::_internal_base() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::im::base::BaseResponse* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::base::BaseResponse&>(::im::base::_BaseResponse_default_instance_);
}
inline const ::im::base::BaseResponse& GetFriendListResponse::base() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.friend.GetFriendListResponse.base)
  return _internal_base();
}
inline void GetFriendListResponse::unsafe_arena_set_allocated_base(::im::base::BaseResponse* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = reinterpret_cast<::im::base::BaseResponse*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.friend.GetFriendListResponse.base)
}
inline ::im::base::BaseResponse* GetFriendListResponse::release_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::BaseResponse* released = _impl_.base_;
  _impl_.base_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::im::base::BaseResponse* GetFriendListResponse::unsafe_arena_release_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.friend.GetFriendListResponse.base)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::BaseResponse* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::im::base::BaseResponse* GetFriendListResponse::_internal_mutable_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.base_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::im::base::BaseResponse>(GetArena());
    _impl_.base_ = reinterpret_cast<::im::base::BaseResponse*>(p);
  }
  return _impl_.base_;
}
inline ::im::base::BaseResponse* GetFriendListResponse::mutable_base() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::im::base::BaseResponse* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:im.friend.GetFriendListResponse.base)
  return _msg;
}
inline void GetFriendListResponse::set_allocated_base(::im::base::BaseResponse* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.base_ = reinterpret_cast<::im::base::BaseResponse*>(value);
  // @@protoc_insertion_point(field_set_allocated:im.friend.GetFriendListResponse.base)
}

// repeated .im.friend.FriendInfo friends = 2;
inline int GetFriendListResponse::_internal_friends_size() const {
  return _internal_friends().size();
}
inline int GetFriendListResponse::friends_size() const {
  return _internal_friends_size();
}
inline void GetFriendListResponse::clear_friends() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.friends_.Clear();
}
inline ::im::friend_::FriendInfo* GetFriendListResponse::mutable_friends(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:im.friend.GetFriendListResponse.friends)
  return _internal_mutable_friends()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::im::friend_::FriendInfo>* GetFriendListResponse::mutable_friends()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:im.friend.GetFriendListResponse.friends)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_friends();
}
inline const ::im::friend_::FriendInfo& GetFriendListResponse::friends(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.friend.GetFriendListResponse.friends)
  return _internal_friends().Get(index);
}
inline ::im::friend_::FriendInfo* GetFriendListResponse::add_friends() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::im::friend_::FriendInfo* _add = _internal_mutable_friends()->Add();
  // @@protoc_insertion_point(field_add:im.friend.GetFriendListResponse.friends)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::im::friend_::FriendInfo>& GetFriendListResponse::friends() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:im.friend.GetFriendListResponse.friends)
  return _internal_friends();
}
inline const ::google::protobuf::RepeatedPtrField<::im::friend_::FriendInfo>&
GetFriendListResponse::_internal_friends() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.friends_;
}
inline ::google::protobuf::RepeatedPtrField<::im::friend_::FriendInfo>*
GetFriendListResponse::_internal_mutable_friends() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.friends_;
}

// -------------------------------------------------------------------

// GetFriendRequestsRequest

// .im.base.IMHeader header = 1;
inline bool GetFriendRequestsRequest::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::im::base::IMHeader& GetFriendRequestsRequest::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::im::base::IMHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::base::IMHeader&>(::im::base::_IMHeader_default_instance_);
}
inline const ::im::base::IMHeader& GetFriendRequestsRequest::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.friend.GetFriendRequestsRequest.header)
  return _internal_header();
}
inline void GetFriendRequestsRequest::unsafe_arena_set_allocated_header(::im::base::IMHeader* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::im::base::IMHeader*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.friend.GetFriendRequestsRequest.header)
}
inline ::im::base::IMHeader* GetFriendRequestsRequest::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::IMHeader* released = _impl_.header_;
  _impl_.header_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::im::base::IMHeader* GetFriendRequestsRequest::unsafe_arena_release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.friend.GetFriendRequestsRequest.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::IMHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::im::base::IMHeader* GetFriendRequestsRequest::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::im::base::IMHeader>(GetArena());
    _impl_.header_ = reinterpret_cast<::im::base::IMHeader*>(p);
  }
  return _impl_.header_;
}
inline ::im::base::IMHeader* GetFriendRequestsRequest::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::im::base::IMHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:im.friend.GetFriendRequestsRequest.header)
  return _msg;
}
inline void GetFriendRequestsRequest::set_allocated_header(::im::base::IMHeader* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::im::base::IMHeader*>(value);
  // @@protoc_insertion_point(field_set_allocated:im.friend.GetFriendRequestsRequest.header)
}

// -------------------------------------------------------------------

// GetFriendRequestsResponse

// .im.base.BaseResponse base = 1;
inline bool GetFriendRequestsResponse::has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline const ::im::base::BaseResponse& GetFriendRequestsResponse::_internal_base() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::im::base::BaseResponse* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::base::BaseResponse&>(::im::base::_BaseResponse_default_instance_);
}
inline const ::im::base::BaseResponse& GetFriendRequestsResponse::base() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.friend.GetFriendRequestsResponse.base)
  return _internal_base();
}
inline void GetFriendRequestsResponse::unsafe_arena_set_allocated_base(::im::base::BaseResponse* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = reinterpret_cast<::im::base::BaseResponse*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.friend.GetFriendRequestsResponse.base)
}
inline ::im::base::BaseResponse* GetFriendRequestsResponse::release_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::BaseResponse* released = _impl_.base_;
  _impl_.base_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::im::base::BaseResponse* GetFriendRequestsResponse::unsafe_arena_release_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.friend.GetFriendRequestsResponse.base)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::BaseResponse* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::im::base::BaseResponse* GetFriendRequestsResponse::_internal_mutable_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.base_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::im::base::BaseResponse>(GetArena());
    _impl_.base_ = reinterpret_cast<::im::base::BaseResponse*>(p);
  }
  return _impl_.base_;
}
inline ::im::base::BaseResponse* GetFriendRequestsResponse::mutable_base() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::im::base::BaseResponse* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:im.friend.GetFriendRequestsResponse.base)
  return _msg;
}
inline void GetFriendRequestsResponse::set_allocated_base(::im::base::BaseResponse* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.base_ = reinterpret_cast<::im::base::BaseResponse*>(value);
  // @@protoc_insertion_point(field_set_allocated:im.friend.GetFriendRequestsResponse.base)
}

// repeated .im.friend.FriendRequest requests = 2;
inline int GetFriendRequestsResponse::_internal_requests_size() const {
  return _internal_requests().size();
}
inline int GetFriendRequestsResponse::requests_size() const {
  return _internal_requests_size();
}
inline void GetFriendRequestsResponse::clear_requests() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requests_.Clear();
}
inline ::im::friend_::FriendRequest* GetFriendRequestsResponse::mutable_requests(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:im.friend.GetFriendRequestsResponse.requests)
  return _internal_mutable_requests()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::im::friend_::FriendRequest>* GetFriendRequestsResponse::mutable_requests()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:im.friend.GetFriendRequestsResponse.requests)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_requests();
}
inline const ::im::friend_::FriendRequest& GetFriendRequestsResponse::requests(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.friend.GetFriendRequestsResponse.requests)
  return _internal_requests().Get(index);
}
inline ::im::friend_::FriendRequest* GetFriendRequestsResponse::add_requests() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::im::friend_::FriendRequest* _add = _internal_mutable_requests()->Add();
  // @@protoc_insertion_point(field_add:im.friend.GetFriendRequestsResponse.requests)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::im::friend_::FriendRequest>& GetFriendRequestsResponse::requests() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:im.friend.GetFriendRequestsResponse.requests)
  return _internal_requests();
}
inline const ::google::protobuf::RepeatedPtrField<::im::friend_::FriendRequest>&
GetFriendRequestsResponse::_internal_requests() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.requests_;
}
inline ::google::protobuf::RepeatedPtrField<::im::friend_::FriendRequest>*
GetFriendRequestsResponse::_internal_mutable_requests() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.requests_;
}

// -------------------------------------------------------------------

// AddToBlacklistRequest

// .im.base.IMHeader header = 1;
inline bool AddToBlacklistRequest::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::im::base::IMHeader& AddToBlacklistRequest::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::im::base::IMHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::base::IMHeader&>(::im::base::_IMHeader_default_instance_);
}
inline const ::im::base::IMHeader& AddToBlacklistRequest::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.friend.AddToBlacklistRequest.header)
  return _internal_header();
}
inline void AddToBlacklistRequest::unsafe_arena_set_allocated_header(::im::base::IMHeader* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::im::base::IMHeader*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.friend.AddToBlacklistRequest.header)
}
inline ::im::base::IMHeader* AddToBlacklistRequest::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::IMHeader* released = _impl_.header_;
  _impl_.header_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::im::base::IMHeader* AddToBlacklistRequest::unsafe_arena_release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.friend.AddToBlacklistRequest.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::IMHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::im::base::IMHeader* AddToBlacklistRequest::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::im::base::IMHeader>(GetArena());
    _impl_.header_ = reinterpret_cast<::im::base::IMHeader*>(p);
  }
  return _impl_.header_;
}
inline ::im::base::IMHeader* AddToBlacklistRequest::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::im::base::IMHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:im.friend.AddToBlacklistRequest.header)
  return _msg;
}
inline void AddToBlacklistRequest::set_allocated_header(::im::base::IMHeader* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::im::base::IMHeader*>(value);
  // @@protoc_insertion_point(field_set_allocated:im.friend.AddToBlacklistRequest.header)
}

// string target_uid = 2;
inline void AddToBlacklistRequest::clear_target_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_uid_.ClearToEmpty();
}
inline const std::string& AddToBlacklistRequest::target_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.friend.AddToBlacklistRequest.target_uid)
  return _internal_target_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddToBlacklistRequest::set_target_uid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:im.friend.AddToBlacklistRequest.target_uid)
}
inline std::string* AddToBlacklistRequest::mutable_target_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_target_uid();
  // @@protoc_insertion_point(field_mutable:im.friend.AddToBlacklistRequest.target_uid)
  return _s;
}
inline const std::string& AddToBlacklistRequest::_internal_target_uid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.target_uid_.Get();
}
inline void AddToBlacklistRequest::_internal_set_target_uid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_uid_.Set(value, GetArena());
}
inline std::string* AddToBlacklistRequest::_internal_mutable_target_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.target_uid_.Mutable( GetArena());
}
inline std::string* AddToBlacklistRequest::release_target_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.friend.AddToBlacklistRequest.target_uid)
  return _impl_.target_uid_.Release();
}
inline void AddToBlacklistRequest::set_allocated_target_uid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_uid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.target_uid_.IsDefault()) {
    _impl_.target_uid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:im.friend.AddToBlacklistRequest.target_uid)
}

// -------------------------------------------------------------------

// AddToBlacklistResponse

// .im.base.BaseResponse base = 1;
inline bool AddToBlacklistResponse::has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline const ::im::base::BaseResponse& AddToBlacklistResponse::_internal_base() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::im::base::BaseResponse* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::base::BaseResponse&>(::im::base::_BaseResponse_default_instance_);
}
inline const ::im::base::BaseResponse& AddToBlacklistResponse::base() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.friend.AddToBlacklistResponse.base)
  return _internal_base();
}
inline void AddToBlacklistResponse::unsafe_arena_set_allocated_base(::im::base::BaseResponse* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = reinterpret_cast<::im::base::BaseResponse*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.friend.AddToBlacklistResponse.base)
}
inline ::im::base::BaseResponse* AddToBlacklistResponse::release_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::BaseResponse* released = _impl_.base_;
  _impl_.base_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::im::base::BaseResponse* AddToBlacklistResponse::unsafe_arena_release_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.friend.AddToBlacklistResponse.base)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::BaseResponse* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::im::base::BaseResponse* AddToBlacklistResponse::_internal_mutable_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.base_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::im::base::BaseResponse>(GetArena());
    _impl_.base_ = reinterpret_cast<::im::base::BaseResponse*>(p);
  }
  return _impl_.base_;
}
inline ::im::base::BaseResponse* AddToBlacklistResponse::mutable_base() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::im::base::BaseResponse* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:im.friend.AddToBlacklistResponse.base)
  return _msg;
}
inline void AddToBlacklistResponse::set_allocated_base(::im::base::BaseResponse* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.base_ = reinterpret_cast<::im::base::BaseResponse*>(value);
  // @@protoc_insertion_point(field_set_allocated:im.friend.AddToBlacklistResponse.base)
}

// -------------------------------------------------------------------

// RemoveFromBlacklistRequest

// .im.base.IMHeader header = 1;
inline bool RemoveFromBlacklistRequest::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::im::base::IMHeader& RemoveFromBlacklistRequest::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::im::base::IMHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::base::IMHeader&>(::im::base::_IMHeader_default_instance_);
}
inline const ::im::base::IMHeader& RemoveFromBlacklistRequest::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.friend.RemoveFromBlacklistRequest.header)
  return _internal_header();
}
inline void RemoveFromBlacklistRequest::unsafe_arena_set_allocated_header(::im::base::IMHeader* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::im::base::IMHeader*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.friend.RemoveFromBlacklistRequest.header)
}
inline ::im::base::IMHeader* RemoveFromBlacklistRequest::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::IMHeader* released = _impl_.header_;
  _impl_.header_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::im::base::IMHeader* RemoveFromBlacklistRequest::unsafe_arena_release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.friend.RemoveFromBlacklistRequest.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::IMHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::im::base::IMHeader* RemoveFromBlacklistRequest::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::im::base::IMHeader>(GetArena());
    _impl_.header_ = reinterpret_cast<::im::base::IMHeader*>(p);
  }
  return _impl_.header_;
}
inline ::im::base::IMHeader* RemoveFromBlacklistRequest::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::im::base::IMHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:im.friend.RemoveFromBlacklistRequest.header)
  return _msg;
}
inline void RemoveFromBlacklistRequest::set_allocated_header(::im::base::IMHeader* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::im::base::IMHeader*>(value);
  // @@protoc_insertion_point(field_set_allocated:im.friend.RemoveFromBlacklistRequest.header)
}

// string target_uid = 2;
inline void RemoveFromBlacklistRequest::clear_target_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_uid_.ClearToEmpty();
}
inline const std::string& RemoveFromBlacklistRequest::target_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.friend.RemoveFromBlacklistRequest.target_uid)
  return _internal_target_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RemoveFromBlacklistRequest::set_target_uid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:im.friend.RemoveFromBlacklistRequest.target_uid)
}
inline std::string* RemoveFromBlacklistRequest::mutable_target_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_target_uid();
  // @@protoc_insertion_point(field_mutable:im.friend.RemoveFromBlacklistRequest.target_uid)
  return _s;
}
inline const std::string& RemoveFromBlacklistRequest::_internal_target_uid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.target_uid_.Get();
}
inline void RemoveFromBlacklistRequest::_internal_set_target_uid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_uid_.Set(value, GetArena());
}
inline std::string* RemoveFromBlacklistRequest::_internal_mutable_target_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.target_uid_.Mutable( GetArena());
}
inline std::string* RemoveFromBlacklistRequest::release_target_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.friend.RemoveFromBlacklistRequest.target_uid)
  return _impl_.target_uid_.Release();
}
inline void RemoveFromBlacklistRequest::set_allocated_target_uid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_uid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.target_uid_.IsDefault()) {
    _impl_.target_uid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:im.friend.RemoveFromBlacklistRequest.target_uid)
}

// -------------------------------------------------------------------

// RemoveFromBlacklistResponse

// .im.base.BaseResponse base = 1;
inline bool RemoveFromBlacklistResponse::has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline const ::im::base::BaseResponse& RemoveFromBlacklistResponse::_internal_base() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::im::base::BaseResponse* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::base::BaseResponse&>(::im::base::_BaseResponse_default_instance_);
}
inline const ::im::base::BaseResponse& RemoveFromBlacklistResponse::base() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.friend.RemoveFromBlacklistResponse.base)
  return _internal_base();
}
inline void RemoveFromBlacklistResponse::unsafe_arena_set_allocated_base(::im::base::BaseResponse* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = reinterpret_cast<::im::base::BaseResponse*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.friend.RemoveFromBlacklistResponse.base)
}
inline ::im::base::BaseResponse* RemoveFromBlacklistResponse::release_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::BaseResponse* released = _impl_.base_;
  _impl_.base_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::im::base::BaseResponse* RemoveFromBlacklistResponse::unsafe_arena_release_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.friend.RemoveFromBlacklistResponse.base)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::BaseResponse* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::im::base::BaseResponse* RemoveFromBlacklistResponse::_internal_mutable_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.base_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::im::base::BaseResponse>(GetArena());
    _impl_.base_ = reinterpret_cast<::im::base::BaseResponse*>(p);
  }
  return _impl_.base_;
}
inline ::im::base::BaseResponse* RemoveFromBlacklistResponse::mutable_base() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::im::base::BaseResponse* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:im.friend.RemoveFromBlacklistResponse.base)
  return _msg;
}
inline void RemoveFromBlacklistResponse::set_allocated_base(::im::base::BaseResponse* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.base_ = reinterpret_cast<::im::base::BaseResponse*>(value);
  // @@protoc_insertion_point(field_set_allocated:im.friend.RemoveFromBlacklistResponse.base)
}

// -------------------------------------------------------------------

// GetBlacklistRequest

// .im.base.IMHeader header = 1;
inline bool GetBlacklistRequest::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::im::base::IMHeader& GetBlacklistRequest::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::im::base::IMHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::base::IMHeader&>(::im::base::_IMHeader_default_instance_);
}
inline const ::im::base::IMHeader& GetBlacklistRequest::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.friend.GetBlacklistRequest.header)
  return _internal_header();
}
inline void GetBlacklistRequest::unsafe_arena_set_allocated_header(::im::base::IMHeader* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::im::base::IMHeader*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.friend.GetBlacklistRequest.header)
}
inline ::im::base::IMHeader* GetBlacklistRequest::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::IMHeader* released = _impl_.header_;
  _impl_.header_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::im::base::IMHeader* GetBlacklistRequest::unsafe_arena_release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.friend.GetBlacklistRequest.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::IMHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::im::base::IMHeader* GetBlacklistRequest::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::im::base::IMHeader>(GetArena());
    _impl_.header_ = reinterpret_cast<::im::base::IMHeader*>(p);
  }
  return _impl_.header_;
}
inline ::im::base::IMHeader* GetBlacklistRequest::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::im::base::IMHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:im.friend.GetBlacklistRequest.header)
  return _msg;
}
inline void GetBlacklistRequest::set_allocated_header(::im::base::IMHeader* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::im::base::IMHeader*>(value);
  // @@protoc_insertion_point(field_set_allocated:im.friend.GetBlacklistRequest.header)
}

// -------------------------------------------------------------------

// GetBlacklistResponse

// .im.base.BaseResponse base = 1;
inline bool GetBlacklistResponse::has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline const ::im::base::BaseResponse& GetBlacklistResponse::_internal_base() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::im::base::BaseResponse* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::base::BaseResponse&>(::im::base::_BaseResponse_default_instance_);
}
inline const ::im::base::BaseResponse& GetBlacklistResponse::base() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.friend.GetBlacklistResponse.base)
  return _internal_base();
}
inline void GetBlacklistResponse::unsafe_arena_set_allocated_base(::im::base::BaseResponse* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = reinterpret_cast<::im::base::BaseResponse*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.friend.GetBlacklistResponse.base)
}
inline ::im::base::BaseResponse* GetBlacklistResponse::release_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::BaseResponse* released = _impl_.base_;
  _impl_.base_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::im::base::BaseResponse* GetBlacklistResponse::unsafe_arena_release_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.friend.GetBlacklistResponse.base)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::BaseResponse* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::im::base::BaseResponse* GetBlacklistResponse::_internal_mutable_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.base_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::im::base::BaseResponse>(GetArena());
    _impl_.base_ = reinterpret_cast<::im::base::BaseResponse*>(p);
  }
  return _impl_.base_;
}
inline ::im::base::BaseResponse* GetBlacklistResponse::mutable_base() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::im::base::BaseResponse* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:im.friend.GetBlacklistResponse.base)
  return _msg;
}
inline void GetBlacklistResponse::set_allocated_base(::im::base::BaseResponse* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.base_ = reinterpret_cast<::im::base::BaseResponse*>(value);
  // @@protoc_insertion_point(field_set_allocated:im.friend.GetBlacklistResponse.base)
}

// repeated string black_uids = 2;
inline int GetBlacklistResponse::_internal_black_uids_size() const {
  return _internal_black_uids().size();
}
inline int GetBlacklistResponse::black_uids_size() const {
  return _internal_black_uids_size();
}
inline void GetBlacklistResponse::clear_black_uids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.black_uids_.Clear();
}
inline std::string* GetBlacklistResponse::add_black_uids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_black_uids()->Add();
  // @@protoc_insertion_point(field_add_mutable:im.friend.GetBlacklistResponse.black_uids)
  return _s;
}
inline const std::string& GetBlacklistResponse::black_uids(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.friend.GetBlacklistResponse.black_uids)
  return _internal_black_uids().Get(index);
}
inline std::string* GetBlacklistResponse::mutable_black_uids(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:im.friend.GetBlacklistResponse.black_uids)
  return _internal_mutable_black_uids()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void GetBlacklistResponse::set_black_uids(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_black_uids()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:im.friend.GetBlacklistResponse.black_uids)
}
template <typename Arg_, typename... Args_>
inline void GetBlacklistResponse::add_black_uids(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_black_uids(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:im.friend.GetBlacklistResponse.black_uids)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GetBlacklistResponse::black_uids() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:im.friend.GetBlacklistResponse.black_uids)
  return _internal_black_uids();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
GetBlacklistResponse::mutable_black_uids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:im.friend.GetBlacklistResponse.black_uids)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_black_uids();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GetBlacklistResponse::_internal_black_uids() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.black_uids_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
GetBlacklistResponse::_internal_mutable_black_uids() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.black_uids_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace friend_
}  // namespace im


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::im::friend_::FriendRequestStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::im::friend_::FriendRequestStatus>() {
  return ::im::friend_::FriendRequestStatus_descriptor();
}
template <>
struct is_proto_enum<::im::friend_::FriendPermission> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::im::friend_::FriendPermission>() {
  return ::im::friend_::FriendPermission_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // friend_2eproto_2epb_2eh

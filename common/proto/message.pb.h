// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: message.proto
// Protobuf C++ Version: 5.29.3

#ifndef message_2eproto_2epb_2eh
#define message_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "base.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_message_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_message_2eproto;
namespace im {
namespace message {
class MessageBody;
struct MessageBodyDefaultTypeInternal;
extern MessageBodyDefaultTypeInternal _MessageBody_default_instance_;
class PullMessageRequest;
struct PullMessageRequestDefaultTypeInternal;
extern PullMessageRequestDefaultTypeInternal _PullMessageRequest_default_instance_;
class PullMessageResponse;
struct PullMessageResponseDefaultTypeInternal;
extern PullMessageResponseDefaultTypeInternal _PullMessageResponse_default_instance_;
class SendMessageRequest;
struct SendMessageRequestDefaultTypeInternal;
extern SendMessageRequestDefaultTypeInternal _SendMessageRequest_default_instance_;
class SendMessageResponse;
struct SendMessageResponseDefaultTypeInternal;
extern SendMessageResponseDefaultTypeInternal _SendMessageResponse_default_instance_;
}  // namespace message
}  // namespace im
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace im {
namespace message {
enum MessageType : int {
  TEXT = 0,
  IMAGE = 1,
  FILE = 2,
  AUDIO = 3,
  VIDEO = 4,
  SYSTEM = 5,
  RECALL = 6,
  CARD = 7,
  LOCATION = 8,
  FORWARD = 9,
  CUSTOM = 10,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MessageType_IsValid(int value);
extern const uint32_t MessageType_internal_data_[];
constexpr MessageType MessageType_MIN = static_cast<MessageType>(0);
constexpr MessageType MessageType_MAX = static_cast<MessageType>(10);
constexpr int MessageType_ARRAYSIZE = 10 + 1;
const ::google::protobuf::EnumDescriptor*
MessageType_descriptor();
template <typename T>
const std::string& MessageType_Name(T value) {
  static_assert(std::is_same<T, MessageType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MessageType_Name().");
  return MessageType_Name(static_cast<MessageType>(value));
}
template <>
inline const std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MessageType_descriptor,
                                                 0, 10>(
      static_cast<int>(value));
}
inline bool MessageType_Parse(absl::string_view name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
      MessageType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class MessageBody final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:im.message.MessageBody) */ {
 public:
  inline MessageBody() : MessageBody(nullptr) {}
  ~MessageBody() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MessageBody* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MessageBody));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MessageBody(
      ::google::protobuf::internal::ConstantInitialized);

  inline MessageBody(const MessageBody& from) : MessageBody(nullptr, from) {}
  inline MessageBody(MessageBody&& from) noexcept
      : MessageBody(nullptr, std::move(from)) {}
  inline MessageBody& operator=(const MessageBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageBody& operator=(MessageBody&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageBody* internal_default_instance() {
    return reinterpret_cast<const MessageBody*>(
        &_MessageBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(MessageBody& a, MessageBody& b) { a.Swap(&b); }
  inline void Swap(MessageBody* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageBody* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageBody* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MessageBody>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MessageBody& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MessageBody& from) { MessageBody::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MessageBody* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "im.message.MessageBody"; }

 protected:
  explicit MessageBody(::google::protobuf::Arena* arena);
  MessageBody(::google::protobuf::Arena* arena, const MessageBody& from);
  MessageBody(::google::protobuf::Arena* arena, MessageBody&& from) noexcept
      : MessageBody(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageIdFieldNumber = 1,
    kContentFieldNumber = 3,
    kAtUidsFieldNumber = 6,
    kExtFieldNumber = 7,
    kTypeFieldNumber = 2,
    kIsRecalledFieldNumber = 4,
    kIsReadFieldNumber = 5,
  };
  // string message_id = 1;
  void clear_message_id() ;
  const std::string& message_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message_id(Arg_&& arg, Args_... args);
  std::string* mutable_message_id();
  PROTOBUF_NODISCARD std::string* release_message_id();
  void set_allocated_message_id(std::string* value);

  private:
  const std::string& _internal_message_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_id(
      const std::string& value);
  std::string* _internal_mutable_message_id();

  public:
  // string content = 3;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* value);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // string at_uids = 6;
  void clear_at_uids() ;
  const std::string& at_uids() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_at_uids(Arg_&& arg, Args_... args);
  std::string* mutable_at_uids();
  PROTOBUF_NODISCARD std::string* release_at_uids();
  void set_allocated_at_uids(std::string* value);

  private:
  const std::string& _internal_at_uids() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_at_uids(
      const std::string& value);
  std::string* _internal_mutable_at_uids();

  public:
  // string ext = 7;
  void clear_ext() ;
  const std::string& ext() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ext(Arg_&& arg, Args_... args);
  std::string* mutable_ext();
  PROTOBUF_NODISCARD std::string* release_ext();
  void set_allocated_ext(std::string* value);

  private:
  const std::string& _internal_ext() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ext(
      const std::string& value);
  std::string* _internal_mutable_ext();

  public:
  // .im.message.MessageType type = 2;
  void clear_type() ;
  ::im::message::MessageType type() const;
  void set_type(::im::message::MessageType value);

  private:
  ::im::message::MessageType _internal_type() const;
  void _internal_set_type(::im::message::MessageType value);

  public:
  // bool is_recalled = 4;
  void clear_is_recalled() ;
  bool is_recalled() const;
  void set_is_recalled(bool value);

  private:
  bool _internal_is_recalled() const;
  void _internal_set_is_recalled(bool value);

  public:
  // bool is_read = 5;
  void clear_is_read() ;
  bool is_read() const;
  void set_is_read(bool value);

  private:
  bool _internal_is_read() const;
  void _internal_set_is_read(bool value);

  public:
  // @@protoc_insertion_point(class_scope:im.message.MessageBody)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      58, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MessageBody& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_id_;
    ::google::protobuf::internal::ArenaStringPtr content_;
    ::google::protobuf::internal::ArenaStringPtr at_uids_;
    ::google::protobuf::internal::ArenaStringPtr ext_;
    int type_;
    bool is_recalled_;
    bool is_read_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class SendMessageResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:im.message.SendMessageResponse) */ {
 public:
  inline SendMessageResponse() : SendMessageResponse(nullptr) {}
  ~SendMessageResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SendMessageResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SendMessageResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SendMessageResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline SendMessageResponse(const SendMessageResponse& from) : SendMessageResponse(nullptr, from) {}
  inline SendMessageResponse(SendMessageResponse&& from) noexcept
      : SendMessageResponse(nullptr, std::move(from)) {}
  inline SendMessageResponse& operator=(const SendMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendMessageResponse& operator=(SendMessageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendMessageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendMessageResponse* internal_default_instance() {
    return reinterpret_cast<const SendMessageResponse*>(
        &_SendMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(SendMessageResponse& a, SendMessageResponse& b) { a.Swap(&b); }
  inline void Swap(SendMessageResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendMessageResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendMessageResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SendMessageResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SendMessageResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SendMessageResponse& from) { SendMessageResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SendMessageResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "im.message.SendMessageResponse"; }

 protected:
  explicit SendMessageResponse(::google::protobuf::Arena* arena);
  SendMessageResponse(::google::protobuf::Arena* arena, const SendMessageResponse& from);
  SendMessageResponse(::google::protobuf::Arena* arena, SendMessageResponse&& from) noexcept
      : SendMessageResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBaseFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // .im.base.BaseResponse base = 1;
  bool has_base() const;
  void clear_base() ;
  const ::im::base::BaseResponse& base() const;
  PROTOBUF_NODISCARD ::im::base::BaseResponse* release_base();
  ::im::base::BaseResponse* mutable_base();
  void set_allocated_base(::im::base::BaseResponse* value);
  void unsafe_arena_set_allocated_base(::im::base::BaseResponse* value);
  ::im::base::BaseResponse* unsafe_arena_release_base();

  private:
  const ::im::base::BaseResponse& _internal_base() const;
  ::im::base::BaseResponse* _internal_mutable_base();

  public:
  // .im.message.MessageBody message = 2;
  bool has_message() const;
  void clear_message() ;
  const ::im::message::MessageBody& message() const;
  PROTOBUF_NODISCARD ::im::message::MessageBody* release_message();
  ::im::message::MessageBody* mutable_message();
  void set_allocated_message(::im::message::MessageBody* value);
  void unsafe_arena_set_allocated_message(::im::message::MessageBody* value);
  ::im::message::MessageBody* unsafe_arena_release_message();

  private:
  const ::im::message::MessageBody& _internal_message() const;
  ::im::message::MessageBody* _internal_mutable_message();

  public:
  // @@protoc_insertion_point(class_scope:im.message.SendMessageResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SendMessageResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::im::base::BaseResponse* base_;
    ::im::message::MessageBody* message_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class SendMessageRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:im.message.SendMessageRequest) */ {
 public:
  inline SendMessageRequest() : SendMessageRequest(nullptr) {}
  ~SendMessageRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SendMessageRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SendMessageRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SendMessageRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SendMessageRequest(const SendMessageRequest& from) : SendMessageRequest(nullptr, from) {}
  inline SendMessageRequest(SendMessageRequest&& from) noexcept
      : SendMessageRequest(nullptr, std::move(from)) {}
  inline SendMessageRequest& operator=(const SendMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendMessageRequest& operator=(SendMessageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendMessageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendMessageRequest* internal_default_instance() {
    return reinterpret_cast<const SendMessageRequest*>(
        &_SendMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(SendMessageRequest& a, SendMessageRequest& b) { a.Swap(&b); }
  inline void Swap(SendMessageRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendMessageRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendMessageRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SendMessageRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SendMessageRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SendMessageRequest& from) { SendMessageRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SendMessageRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "im.message.SendMessageRequest"; }

 protected:
  explicit SendMessageRequest(::google::protobuf::Arena* arena);
  SendMessageRequest(::google::protobuf::Arena* arena, const SendMessageRequest& from);
  SendMessageRequest(::google::protobuf::Arena* arena, SendMessageRequest&& from) noexcept
      : SendMessageRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderFieldNumber = 1,
    kBodyFieldNumber = 2,
  };
  // .im.base.IMHeader header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::im::base::IMHeader& header() const;
  PROTOBUF_NODISCARD ::im::base::IMHeader* release_header();
  ::im::base::IMHeader* mutable_header();
  void set_allocated_header(::im::base::IMHeader* value);
  void unsafe_arena_set_allocated_header(::im::base::IMHeader* value);
  ::im::base::IMHeader* unsafe_arena_release_header();

  private:
  const ::im::base::IMHeader& _internal_header() const;
  ::im::base::IMHeader* _internal_mutable_header();

  public:
  // .im.message.MessageBody body = 2;
  bool has_body() const;
  void clear_body() ;
  const ::im::message::MessageBody& body() const;
  PROTOBUF_NODISCARD ::im::message::MessageBody* release_body();
  ::im::message::MessageBody* mutable_body();
  void set_allocated_body(::im::message::MessageBody* value);
  void unsafe_arena_set_allocated_body(::im::message::MessageBody* value);
  ::im::message::MessageBody* unsafe_arena_release_body();

  private:
  const ::im::message::MessageBody& _internal_body() const;
  ::im::message::MessageBody* _internal_mutable_body();

  public:
  // @@protoc_insertion_point(class_scope:im.message.SendMessageRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SendMessageRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::im::base::IMHeader* header_;
    ::im::message::MessageBody* body_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class PullMessageResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:im.message.PullMessageResponse) */ {
 public:
  inline PullMessageResponse() : PullMessageResponse(nullptr) {}
  ~PullMessageResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PullMessageResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PullMessageResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PullMessageResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline PullMessageResponse(const PullMessageResponse& from) : PullMessageResponse(nullptr, from) {}
  inline PullMessageResponse(PullMessageResponse&& from) noexcept
      : PullMessageResponse(nullptr, std::move(from)) {}
  inline PullMessageResponse& operator=(const PullMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullMessageResponse& operator=(PullMessageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PullMessageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PullMessageResponse* internal_default_instance() {
    return reinterpret_cast<const PullMessageResponse*>(
        &_PullMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(PullMessageResponse& a, PullMessageResponse& b) { a.Swap(&b); }
  inline void Swap(PullMessageResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PullMessageResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PullMessageResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PullMessageResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PullMessageResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PullMessageResponse& from) { PullMessageResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PullMessageResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "im.message.PullMessageResponse"; }

 protected:
  explicit PullMessageResponse(::google::protobuf::Arena* arena);
  PullMessageResponse(::google::protobuf::Arena* arena, const PullMessageResponse& from);
  PullMessageResponse(::google::protobuf::Arena* arena, PullMessageResponse&& from) noexcept
      : PullMessageResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessagesFieldNumber = 2,
    kBaseFieldNumber = 1,
  };
  // repeated .im.message.MessageBody messages = 2;
  int messages_size() const;
  private:
  int _internal_messages_size() const;

  public:
  void clear_messages() ;
  ::im::message::MessageBody* mutable_messages(int index);
  ::google::protobuf::RepeatedPtrField<::im::message::MessageBody>* mutable_messages();

  private:
  const ::google::protobuf::RepeatedPtrField<::im::message::MessageBody>& _internal_messages() const;
  ::google::protobuf::RepeatedPtrField<::im::message::MessageBody>* _internal_mutable_messages();
  public:
  const ::im::message::MessageBody& messages(int index) const;
  ::im::message::MessageBody* add_messages();
  const ::google::protobuf::RepeatedPtrField<::im::message::MessageBody>& messages() const;
  // .im.base.BaseResponse base = 1;
  bool has_base() const;
  void clear_base() ;
  const ::im::base::BaseResponse& base() const;
  PROTOBUF_NODISCARD ::im::base::BaseResponse* release_base();
  ::im::base::BaseResponse* mutable_base();
  void set_allocated_base(::im::base::BaseResponse* value);
  void unsafe_arena_set_allocated_base(::im::base::BaseResponse* value);
  ::im::base::BaseResponse* unsafe_arena_release_base();

  private:
  const ::im::base::BaseResponse& _internal_base() const;
  ::im::base::BaseResponse* _internal_mutable_base();

  public:
  // @@protoc_insertion_point(class_scope:im.message.PullMessageResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PullMessageResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::im::message::MessageBody > messages_;
    ::im::base::BaseResponse* base_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class PullMessageRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:im.message.PullMessageRequest) */ {
 public:
  inline PullMessageRequest() : PullMessageRequest(nullptr) {}
  ~PullMessageRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PullMessageRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PullMessageRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PullMessageRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PullMessageRequest(const PullMessageRequest& from) : PullMessageRequest(nullptr, from) {}
  inline PullMessageRequest(PullMessageRequest&& from) noexcept
      : PullMessageRequest(nullptr, std::move(from)) {}
  inline PullMessageRequest& operator=(const PullMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullMessageRequest& operator=(PullMessageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PullMessageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PullMessageRequest* internal_default_instance() {
    return reinterpret_cast<const PullMessageRequest*>(
        &_PullMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(PullMessageRequest& a, PullMessageRequest& b) { a.Swap(&b); }
  inline void Swap(PullMessageRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PullMessageRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PullMessageRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PullMessageRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PullMessageRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PullMessageRequest& from) { PullMessageRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PullMessageRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "im.message.PullMessageRequest"; }

 protected:
  explicit PullMessageRequest(::google::protobuf::Arena* arena);
  PullMessageRequest(::google::protobuf::Arena* arena, const PullMessageRequest& from);
  PullMessageRequest(::google::protobuf::Arena* arena, PullMessageRequest&& from) noexcept
      : PullMessageRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSessionIdFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kSinceFieldNumber = 3,
    kLimitFieldNumber = 4,
  };
  // string session_id = 2;
  void clear_session_id() ;
  const std::string& session_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_session_id(Arg_&& arg, Args_... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* value);

  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(
      const std::string& value);
  std::string* _internal_mutable_session_id();

  public:
  // .im.base.IMHeader header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::im::base::IMHeader& header() const;
  PROTOBUF_NODISCARD ::im::base::IMHeader* release_header();
  ::im::base::IMHeader* mutable_header();
  void set_allocated_header(::im::base::IMHeader* value);
  void unsafe_arena_set_allocated_header(::im::base::IMHeader* value);
  ::im::base::IMHeader* unsafe_arena_release_header();

  private:
  const ::im::base::IMHeader& _internal_header() const;
  ::im::base::IMHeader* _internal_mutable_header();

  public:
  // int64 since = 3;
  void clear_since() ;
  ::int64_t since() const;
  void set_since(::int64_t value);

  private:
  ::int64_t _internal_since() const;
  void _internal_set_since(::int64_t value);

  public:
  // int32 limit = 4;
  void clear_limit() ;
  ::int32_t limit() const;
  void set_limit(::int32_t value);

  private:
  ::int32_t _internal_limit() const;
  void _internal_set_limit(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:im.message.PullMessageRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      48, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PullMessageRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr session_id_;
    ::im::base::IMHeader* header_;
    ::int64_t since_;
    ::int32_t limit_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MessageBody

// string message_id = 1;
inline void MessageBody::clear_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.ClearToEmpty();
}
inline const std::string& MessageBody::message_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.message.MessageBody.message_id)
  return _internal_message_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MessageBody::set_message_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:im.message.MessageBody.message_id)
}
inline std::string* MessageBody::mutable_message_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message_id();
  // @@protoc_insertion_point(field_mutable:im.message.MessageBody.message_id)
  return _s;
}
inline const std::string& MessageBody::_internal_message_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_id_.Get();
}
inline void MessageBody::_internal_set_message_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.Set(value, GetArena());
}
inline std::string* MessageBody::_internal_mutable_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_id_.Mutable( GetArena());
}
inline std::string* MessageBody::release_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.message.MessageBody.message_id)
  return _impl_.message_id_.Release();
}
inline void MessageBody::set_allocated_message_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_id_.IsDefault()) {
    _impl_.message_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:im.message.MessageBody.message_id)
}

// .im.message.MessageType type = 2;
inline void MessageBody::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::im::message::MessageType MessageBody::type() const {
  // @@protoc_insertion_point(field_get:im.message.MessageBody.type)
  return _internal_type();
}
inline void MessageBody::set_type(::im::message::MessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:im.message.MessageBody.type)
}
inline ::im::message::MessageType MessageBody::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::im::message::MessageType>(_impl_.type_);
}
inline void MessageBody::_internal_set_type(::im::message::MessageType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// string content = 3;
inline void MessageBody::clear_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.ClearToEmpty();
}
inline const std::string& MessageBody::content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.message.MessageBody.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MessageBody::set_content(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:im.message.MessageBody.content)
}
inline std::string* MessageBody::mutable_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:im.message.MessageBody.content)
  return _s;
}
inline const std::string& MessageBody::_internal_content() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.content_.Get();
}
inline void MessageBody::_internal_set_content(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.Set(value, GetArena());
}
inline std::string* MessageBody::_internal_mutable_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.content_.Mutable( GetArena());
}
inline std::string* MessageBody::release_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.message.MessageBody.content)
  return _impl_.content_.Release();
}
inline void MessageBody::set_allocated_content(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:im.message.MessageBody.content)
}

// bool is_recalled = 4;
inline void MessageBody::clear_is_recalled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_recalled_ = false;
}
inline bool MessageBody::is_recalled() const {
  // @@protoc_insertion_point(field_get:im.message.MessageBody.is_recalled)
  return _internal_is_recalled();
}
inline void MessageBody::set_is_recalled(bool value) {
  _internal_set_is_recalled(value);
  // @@protoc_insertion_point(field_set:im.message.MessageBody.is_recalled)
}
inline bool MessageBody::_internal_is_recalled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_recalled_;
}
inline void MessageBody::_internal_set_is_recalled(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_recalled_ = value;
}

// bool is_read = 5;
inline void MessageBody::clear_is_read() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_read_ = false;
}
inline bool MessageBody::is_read() const {
  // @@protoc_insertion_point(field_get:im.message.MessageBody.is_read)
  return _internal_is_read();
}
inline void MessageBody::set_is_read(bool value) {
  _internal_set_is_read(value);
  // @@protoc_insertion_point(field_set:im.message.MessageBody.is_read)
}
inline bool MessageBody::_internal_is_read() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_read_;
}
inline void MessageBody::_internal_set_is_read(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_read_ = value;
}

// string at_uids = 6;
inline void MessageBody::clear_at_uids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.at_uids_.ClearToEmpty();
}
inline const std::string& MessageBody::at_uids() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.message.MessageBody.at_uids)
  return _internal_at_uids();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MessageBody::set_at_uids(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.at_uids_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:im.message.MessageBody.at_uids)
}
inline std::string* MessageBody::mutable_at_uids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_at_uids();
  // @@protoc_insertion_point(field_mutable:im.message.MessageBody.at_uids)
  return _s;
}
inline const std::string& MessageBody::_internal_at_uids() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.at_uids_.Get();
}
inline void MessageBody::_internal_set_at_uids(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.at_uids_.Set(value, GetArena());
}
inline std::string* MessageBody::_internal_mutable_at_uids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.at_uids_.Mutable( GetArena());
}
inline std::string* MessageBody::release_at_uids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.message.MessageBody.at_uids)
  return _impl_.at_uids_.Release();
}
inline void MessageBody::set_allocated_at_uids(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.at_uids_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.at_uids_.IsDefault()) {
    _impl_.at_uids_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:im.message.MessageBody.at_uids)
}

// string ext = 7;
inline void MessageBody::clear_ext() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ext_.ClearToEmpty();
}
inline const std::string& MessageBody::ext() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.message.MessageBody.ext)
  return _internal_ext();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MessageBody::set_ext(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ext_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:im.message.MessageBody.ext)
}
inline std::string* MessageBody::mutable_ext() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ext();
  // @@protoc_insertion_point(field_mutable:im.message.MessageBody.ext)
  return _s;
}
inline const std::string& MessageBody::_internal_ext() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ext_.Get();
}
inline void MessageBody::_internal_set_ext(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ext_.Set(value, GetArena());
}
inline std::string* MessageBody::_internal_mutable_ext() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.ext_.Mutable( GetArena());
}
inline std::string* MessageBody::release_ext() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.message.MessageBody.ext)
  return _impl_.ext_.Release();
}
inline void MessageBody::set_allocated_ext(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ext_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.ext_.IsDefault()) {
    _impl_.ext_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:im.message.MessageBody.ext)
}

// -------------------------------------------------------------------

// SendMessageRequest

// .im.base.IMHeader header = 1;
inline bool SendMessageRequest::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::im::base::IMHeader& SendMessageRequest::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::im::base::IMHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::base::IMHeader&>(::im::base::_IMHeader_default_instance_);
}
inline const ::im::base::IMHeader& SendMessageRequest::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.message.SendMessageRequest.header)
  return _internal_header();
}
inline void SendMessageRequest::unsafe_arena_set_allocated_header(::im::base::IMHeader* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::im::base::IMHeader*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.message.SendMessageRequest.header)
}
inline ::im::base::IMHeader* SendMessageRequest::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::IMHeader* released = _impl_.header_;
  _impl_.header_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::im::base::IMHeader* SendMessageRequest::unsafe_arena_release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.message.SendMessageRequest.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::IMHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::im::base::IMHeader* SendMessageRequest::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::im::base::IMHeader>(GetArena());
    _impl_.header_ = reinterpret_cast<::im::base::IMHeader*>(p);
  }
  return _impl_.header_;
}
inline ::im::base::IMHeader* SendMessageRequest::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::im::base::IMHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:im.message.SendMessageRequest.header)
  return _msg;
}
inline void SendMessageRequest::set_allocated_header(::im::base::IMHeader* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::im::base::IMHeader*>(value);
  // @@protoc_insertion_point(field_set_allocated:im.message.SendMessageRequest.header)
}

// .im.message.MessageBody body = 2;
inline bool SendMessageRequest::has_body() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.body_ != nullptr);
  return value;
}
inline void SendMessageRequest::clear_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.body_ != nullptr) _impl_.body_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::im::message::MessageBody& SendMessageRequest::_internal_body() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::im::message::MessageBody* p = _impl_.body_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::message::MessageBody&>(::im::message::_MessageBody_default_instance_);
}
inline const ::im::message::MessageBody& SendMessageRequest::body() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.message.SendMessageRequest.body)
  return _internal_body();
}
inline void SendMessageRequest::unsafe_arena_set_allocated_body(::im::message::MessageBody* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.body_);
  }
  _impl_.body_ = reinterpret_cast<::im::message::MessageBody*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.message.SendMessageRequest.body)
}
inline ::im::message::MessageBody* SendMessageRequest::release_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::im::message::MessageBody* released = _impl_.body_;
  _impl_.body_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::im::message::MessageBody* SendMessageRequest::unsafe_arena_release_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.message.SendMessageRequest.body)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::im::message::MessageBody* temp = _impl_.body_;
  _impl_.body_ = nullptr;
  return temp;
}
inline ::im::message::MessageBody* SendMessageRequest::_internal_mutable_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.body_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::im::message::MessageBody>(GetArena());
    _impl_.body_ = reinterpret_cast<::im::message::MessageBody*>(p);
  }
  return _impl_.body_;
}
inline ::im::message::MessageBody* SendMessageRequest::mutable_body() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::im::message::MessageBody* _msg = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:im.message.SendMessageRequest.body)
  return _msg;
}
inline void SendMessageRequest::set_allocated_body(::im::message::MessageBody* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.body_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.body_ = reinterpret_cast<::im::message::MessageBody*>(value);
  // @@protoc_insertion_point(field_set_allocated:im.message.SendMessageRequest.body)
}

// -------------------------------------------------------------------

// SendMessageResponse

// .im.base.BaseResponse base = 1;
inline bool SendMessageResponse::has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline const ::im::base::BaseResponse& SendMessageResponse::_internal_base() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::im::base::BaseResponse* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::base::BaseResponse&>(::im::base::_BaseResponse_default_instance_);
}
inline const ::im::base::BaseResponse& SendMessageResponse::base() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.message.SendMessageResponse.base)
  return _internal_base();
}
inline void SendMessageResponse::unsafe_arena_set_allocated_base(::im::base::BaseResponse* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = reinterpret_cast<::im::base::BaseResponse*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.message.SendMessageResponse.base)
}
inline ::im::base::BaseResponse* SendMessageResponse::release_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::BaseResponse* released = _impl_.base_;
  _impl_.base_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::im::base::BaseResponse* SendMessageResponse::unsafe_arena_release_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.message.SendMessageResponse.base)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::BaseResponse* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::im::base::BaseResponse* SendMessageResponse::_internal_mutable_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.base_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::im::base::BaseResponse>(GetArena());
    _impl_.base_ = reinterpret_cast<::im::base::BaseResponse*>(p);
  }
  return _impl_.base_;
}
inline ::im::base::BaseResponse* SendMessageResponse::mutable_base() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::im::base::BaseResponse* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:im.message.SendMessageResponse.base)
  return _msg;
}
inline void SendMessageResponse::set_allocated_base(::im::base::BaseResponse* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.base_ = reinterpret_cast<::im::base::BaseResponse*>(value);
  // @@protoc_insertion_point(field_set_allocated:im.message.SendMessageResponse.base)
}

// .im.message.MessageBody message = 2;
inline bool SendMessageResponse::has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.message_ != nullptr);
  return value;
}
inline void SendMessageResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.message_ != nullptr) _impl_.message_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::im::message::MessageBody& SendMessageResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::im::message::MessageBody* p = _impl_.message_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::message::MessageBody&>(::im::message::_MessageBody_default_instance_);
}
inline const ::im::message::MessageBody& SendMessageResponse::message() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.message.SendMessageResponse.message)
  return _internal_message();
}
inline void SendMessageResponse::unsafe_arena_set_allocated_message(::im::message::MessageBody* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.message_);
  }
  _impl_.message_ = reinterpret_cast<::im::message::MessageBody*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.message.SendMessageResponse.message)
}
inline ::im::message::MessageBody* SendMessageResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::im::message::MessageBody* released = _impl_.message_;
  _impl_.message_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::im::message::MessageBody* SendMessageResponse::unsafe_arena_release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.message.SendMessageResponse.message)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::im::message::MessageBody* temp = _impl_.message_;
  _impl_.message_ = nullptr;
  return temp;
}
inline ::im::message::MessageBody* SendMessageResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.message_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::im::message::MessageBody>(GetArena());
    _impl_.message_ = reinterpret_cast<::im::message::MessageBody*>(p);
  }
  return _impl_.message_;
}
inline ::im::message::MessageBody* SendMessageResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::im::message::MessageBody* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:im.message.SendMessageResponse.message)
  return _msg;
}
inline void SendMessageResponse::set_allocated_message(::im::message::MessageBody* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.message_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.message_ = reinterpret_cast<::im::message::MessageBody*>(value);
  // @@protoc_insertion_point(field_set_allocated:im.message.SendMessageResponse.message)
}

// -------------------------------------------------------------------

// PullMessageRequest

// .im.base.IMHeader header = 1;
inline bool PullMessageRequest::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::im::base::IMHeader& PullMessageRequest::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::im::base::IMHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::base::IMHeader&>(::im::base::_IMHeader_default_instance_);
}
inline const ::im::base::IMHeader& PullMessageRequest::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.message.PullMessageRequest.header)
  return _internal_header();
}
inline void PullMessageRequest::unsafe_arena_set_allocated_header(::im::base::IMHeader* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::im::base::IMHeader*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.message.PullMessageRequest.header)
}
inline ::im::base::IMHeader* PullMessageRequest::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::IMHeader* released = _impl_.header_;
  _impl_.header_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::im::base::IMHeader* PullMessageRequest::unsafe_arena_release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.message.PullMessageRequest.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::IMHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::im::base::IMHeader* PullMessageRequest::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::im::base::IMHeader>(GetArena());
    _impl_.header_ = reinterpret_cast<::im::base::IMHeader*>(p);
  }
  return _impl_.header_;
}
inline ::im::base::IMHeader* PullMessageRequest::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::im::base::IMHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:im.message.PullMessageRequest.header)
  return _msg;
}
inline void PullMessageRequest::set_allocated_header(::im::base::IMHeader* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::im::base::IMHeader*>(value);
  // @@protoc_insertion_point(field_set_allocated:im.message.PullMessageRequest.header)
}

// string session_id = 2;
inline void PullMessageRequest::clear_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.ClearToEmpty();
}
inline const std::string& PullMessageRequest::session_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.message.PullMessageRequest.session_id)
  return _internal_session_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PullMessageRequest::set_session_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:im.message.PullMessageRequest.session_id)
}
inline std::string* PullMessageRequest::mutable_session_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:im.message.PullMessageRequest.session_id)
  return _s;
}
inline const std::string& PullMessageRequest::_internal_session_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.session_id_.Get();
}
inline void PullMessageRequest::_internal_set_session_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.Set(value, GetArena());
}
inline std::string* PullMessageRequest::_internal_mutable_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.session_id_.Mutable( GetArena());
}
inline std::string* PullMessageRequest::release_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.message.PullMessageRequest.session_id)
  return _impl_.session_id_.Release();
}
inline void PullMessageRequest::set_allocated_session_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.session_id_.IsDefault()) {
    _impl_.session_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:im.message.PullMessageRequest.session_id)
}

// int64 since = 3;
inline void PullMessageRequest::clear_since() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.since_ = ::int64_t{0};
}
inline ::int64_t PullMessageRequest::since() const {
  // @@protoc_insertion_point(field_get:im.message.PullMessageRequest.since)
  return _internal_since();
}
inline void PullMessageRequest::set_since(::int64_t value) {
  _internal_set_since(value);
  // @@protoc_insertion_point(field_set:im.message.PullMessageRequest.since)
}
inline ::int64_t PullMessageRequest::_internal_since() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.since_;
}
inline void PullMessageRequest::_internal_set_since(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.since_ = value;
}

// int32 limit = 4;
inline void PullMessageRequest::clear_limit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.limit_ = 0;
}
inline ::int32_t PullMessageRequest::limit() const {
  // @@protoc_insertion_point(field_get:im.message.PullMessageRequest.limit)
  return _internal_limit();
}
inline void PullMessageRequest::set_limit(::int32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:im.message.PullMessageRequest.limit)
}
inline ::int32_t PullMessageRequest::_internal_limit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.limit_;
}
inline void PullMessageRequest::_internal_set_limit(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.limit_ = value;
}

// -------------------------------------------------------------------

// PullMessageResponse

// .im.base.BaseResponse base = 1;
inline bool PullMessageResponse::has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline const ::im::base::BaseResponse& PullMessageResponse::_internal_base() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::im::base::BaseResponse* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::base::BaseResponse&>(::im::base::_BaseResponse_default_instance_);
}
inline const ::im::base::BaseResponse& PullMessageResponse::base() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.message.PullMessageResponse.base)
  return _internal_base();
}
inline void PullMessageResponse::unsafe_arena_set_allocated_base(::im::base::BaseResponse* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = reinterpret_cast<::im::base::BaseResponse*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.message.PullMessageResponse.base)
}
inline ::im::base::BaseResponse* PullMessageResponse::release_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::BaseResponse* released = _impl_.base_;
  _impl_.base_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::im::base::BaseResponse* PullMessageResponse::unsafe_arena_release_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.message.PullMessageResponse.base)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::BaseResponse* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::im::base::BaseResponse* PullMessageResponse::_internal_mutable_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.base_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::im::base::BaseResponse>(GetArena());
    _impl_.base_ = reinterpret_cast<::im::base::BaseResponse*>(p);
  }
  return _impl_.base_;
}
inline ::im::base::BaseResponse* PullMessageResponse::mutable_base() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::im::base::BaseResponse* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:im.message.PullMessageResponse.base)
  return _msg;
}
inline void PullMessageResponse::set_allocated_base(::im::base::BaseResponse* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.base_ = reinterpret_cast<::im::base::BaseResponse*>(value);
  // @@protoc_insertion_point(field_set_allocated:im.message.PullMessageResponse.base)
}

// repeated .im.message.MessageBody messages = 2;
inline int PullMessageResponse::_internal_messages_size() const {
  return _internal_messages().size();
}
inline int PullMessageResponse::messages_size() const {
  return _internal_messages_size();
}
inline void PullMessageResponse::clear_messages() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.messages_.Clear();
}
inline ::im::message::MessageBody* PullMessageResponse::mutable_messages(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:im.message.PullMessageResponse.messages)
  return _internal_mutable_messages()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::im::message::MessageBody>* PullMessageResponse::mutable_messages()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:im.message.PullMessageResponse.messages)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_messages();
}
inline const ::im::message::MessageBody& PullMessageResponse::messages(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.message.PullMessageResponse.messages)
  return _internal_messages().Get(index);
}
inline ::im::message::MessageBody* PullMessageResponse::add_messages() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::im::message::MessageBody* _add = _internal_mutable_messages()->Add();
  // @@protoc_insertion_point(field_add:im.message.PullMessageResponse.messages)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::im::message::MessageBody>& PullMessageResponse::messages() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:im.message.PullMessageResponse.messages)
  return _internal_messages();
}
inline const ::google::protobuf::RepeatedPtrField<::im::message::MessageBody>&
PullMessageResponse::_internal_messages() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.messages_;
}
inline ::google::protobuf::RepeatedPtrField<::im::message::MessageBody>*
PullMessageResponse::_internal_mutable_messages() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.messages_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace message
}  // namespace im


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::im::message::MessageType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::im::message::MessageType>() {
  return ::im::message::MessageType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // message_2eproto_2epb_2eh

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: push.proto
// Protobuf C++ Version: 5.29.3

#ifndef push_2eproto_2epb_2eh
#define push_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "base.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_push_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_push_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_push_2eproto;
namespace im {
namespace push {
class PushMessageBody;
struct PushMessageBodyDefaultTypeInternal;
extern PushMessageBodyDefaultTypeInternal _PushMessageBody_default_instance_;
class PushRequest;
struct PushRequestDefaultTypeInternal;
extern PushRequestDefaultTypeInternal _PushRequest_default_instance_;
class PushResponse;
struct PushResponseDefaultTypeInternal;
extern PushResponseDefaultTypeInternal _PushResponse_default_instance_;
}  // namespace push
}  // namespace im
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace im {
namespace push {
enum PushType : int {
  PUSH_MESSAGE = 0,
  PUSH_NOTIFICATION = 1,
  PUSH_SYSTEM = 2,
  PUSH_OFFLINE = 3,
  PushType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  PushType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool PushType_IsValid(int value);
extern const uint32_t PushType_internal_data_[];
constexpr PushType PushType_MIN = static_cast<PushType>(0);
constexpr PushType PushType_MAX = static_cast<PushType>(3);
constexpr int PushType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
PushType_descriptor();
template <typename T>
const std::string& PushType_Name(T value) {
  static_assert(std::is_same<T, PushType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PushType_Name().");
  return PushType_Name(static_cast<PushType>(value));
}
template <>
inline const std::string& PushType_Name(PushType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PushType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool PushType_Parse(absl::string_view name, PushType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PushType>(
      PushType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class PushMessageBody final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:im.push.PushMessageBody) */ {
 public:
  inline PushMessageBody() : PushMessageBody(nullptr) {}
  ~PushMessageBody() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PushMessageBody* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PushMessageBody));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PushMessageBody(
      ::google::protobuf::internal::ConstantInitialized);

  inline PushMessageBody(const PushMessageBody& from) : PushMessageBody(nullptr, from) {}
  inline PushMessageBody(PushMessageBody&& from) noexcept
      : PushMessageBody(nullptr, std::move(from)) {}
  inline PushMessageBody& operator=(const PushMessageBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushMessageBody& operator=(PushMessageBody&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PushMessageBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const PushMessageBody* internal_default_instance() {
    return reinterpret_cast<const PushMessageBody*>(
        &_PushMessageBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(PushMessageBody& a, PushMessageBody& b) { a.Swap(&b); }
  inline void Swap(PushMessageBody* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PushMessageBody* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PushMessageBody* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PushMessageBody>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PushMessageBody& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PushMessageBody& from) { PushMessageBody::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PushMessageBody* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "im.push.PushMessageBody"; }

 protected:
  explicit PushMessageBody(::google::protobuf::Arena* arena);
  PushMessageBody(::google::protobuf::Arena* arena, const PushMessageBody& from);
  PushMessageBody(::google::protobuf::Arena* arena, PushMessageBody&& from) noexcept
      : PushMessageBody(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPushIdFieldNumber = 1,
    kContentFieldNumber = 3,
    kRelatedMessageIdFieldNumber = 4,
    kExtFieldNumber = 5,
    kTypeFieldNumber = 2,
  };
  // string push_id = 1;
  void clear_push_id() ;
  const std::string& push_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_push_id(Arg_&& arg, Args_... args);
  std::string* mutable_push_id();
  PROTOBUF_NODISCARD std::string* release_push_id();
  void set_allocated_push_id(std::string* value);

  private:
  const std::string& _internal_push_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_push_id(
      const std::string& value);
  std::string* _internal_mutable_push_id();

  public:
  // string content = 3;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* value);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // string related_message_id = 4;
  void clear_related_message_id() ;
  const std::string& related_message_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_related_message_id(Arg_&& arg, Args_... args);
  std::string* mutable_related_message_id();
  PROTOBUF_NODISCARD std::string* release_related_message_id();
  void set_allocated_related_message_id(std::string* value);

  private:
  const std::string& _internal_related_message_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_related_message_id(
      const std::string& value);
  std::string* _internal_mutable_related_message_id();

  public:
  // string ext = 5;
  void clear_ext() ;
  const std::string& ext() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ext(Arg_&& arg, Args_... args);
  std::string* mutable_ext();
  PROTOBUF_NODISCARD std::string* release_ext();
  void set_allocated_ext(std::string* value);

  private:
  const std::string& _internal_ext() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ext(
      const std::string& value);
  std::string* _internal_mutable_ext();

  public:
  // .im.push.PushType type = 2;
  void clear_type() ;
  ::im::push::PushType type() const;
  void set_type(::im::push::PushType value);

  private:
  ::im::push::PushType _internal_type() const;
  void _internal_set_type(::im::push::PushType value);

  public:
  // @@protoc_insertion_point(class_scope:im.push.PushMessageBody)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      67, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PushMessageBody& from_msg);
    ::google::protobuf::internal::ArenaStringPtr push_id_;
    ::google::protobuf::internal::ArenaStringPtr content_;
    ::google::protobuf::internal::ArenaStringPtr related_message_id_;
    ::google::protobuf::internal::ArenaStringPtr ext_;
    int type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_push_2eproto;
};
// -------------------------------------------------------------------

class PushResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:im.push.PushResponse) */ {
 public:
  inline PushResponse() : PushResponse(nullptr) {}
  ~PushResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PushResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PushResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PushResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline PushResponse(const PushResponse& from) : PushResponse(nullptr, from) {}
  inline PushResponse(PushResponse&& from) noexcept
      : PushResponse(nullptr, std::move(from)) {}
  inline PushResponse& operator=(const PushResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushResponse& operator=(PushResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PushResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PushResponse* internal_default_instance() {
    return reinterpret_cast<const PushResponse*>(
        &_PushResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(PushResponse& a, PushResponse& b) { a.Swap(&b); }
  inline void Swap(PushResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PushResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PushResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PushResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PushResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PushResponse& from) { PushResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PushResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "im.push.PushResponse"; }

 protected:
  explicit PushResponse(::google::protobuf::Arena* arena);
  PushResponse(::google::protobuf::Arena* arena, const PushResponse& from);
  PushResponse(::google::protobuf::Arena* arena, PushResponse&& from) noexcept
      : PushResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBaseFieldNumber = 1,
  };
  // .im.base.BaseResponse base = 1;
  bool has_base() const;
  void clear_base() ;
  const ::im::base::BaseResponse& base() const;
  PROTOBUF_NODISCARD ::im::base::BaseResponse* release_base();
  ::im::base::BaseResponse* mutable_base();
  void set_allocated_base(::im::base::BaseResponse* value);
  void unsafe_arena_set_allocated_base(::im::base::BaseResponse* value);
  ::im::base::BaseResponse* unsafe_arena_release_base();

  private:
  const ::im::base::BaseResponse& _internal_base() const;
  ::im::base::BaseResponse* _internal_mutable_base();

  public:
  // @@protoc_insertion_point(class_scope:im.push.PushResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PushResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::im::base::BaseResponse* base_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_push_2eproto;
};
// -------------------------------------------------------------------

class PushRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:im.push.PushRequest) */ {
 public:
  inline PushRequest() : PushRequest(nullptr) {}
  ~PushRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PushRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PushRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PushRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PushRequest(const PushRequest& from) : PushRequest(nullptr, from) {}
  inline PushRequest(PushRequest&& from) noexcept
      : PushRequest(nullptr, std::move(from)) {}
  inline PushRequest& operator=(const PushRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushRequest& operator=(PushRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PushRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PushRequest* internal_default_instance() {
    return reinterpret_cast<const PushRequest*>(
        &_PushRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(PushRequest& a, PushRequest& b) { a.Swap(&b); }
  inline void Swap(PushRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PushRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PushRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PushRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PushRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PushRequest& from) { PushRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PushRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "im.push.PushRequest"; }

 protected:
  explicit PushRequest(::google::protobuf::Arena* arena);
  PushRequest(::google::protobuf::Arena* arena, const PushRequest& from);
  PushRequest(::google::protobuf::Arena* arena, PushRequest&& from) noexcept
      : PushRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderFieldNumber = 1,
    kBodyFieldNumber = 2,
  };
  // .im.base.IMHeader header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::im::base::IMHeader& header() const;
  PROTOBUF_NODISCARD ::im::base::IMHeader* release_header();
  ::im::base::IMHeader* mutable_header();
  void set_allocated_header(::im::base::IMHeader* value);
  void unsafe_arena_set_allocated_header(::im::base::IMHeader* value);
  ::im::base::IMHeader* unsafe_arena_release_header();

  private:
  const ::im::base::IMHeader& _internal_header() const;
  ::im::base::IMHeader* _internal_mutable_header();

  public:
  // .im.push.PushMessageBody body = 2;
  bool has_body() const;
  void clear_body() ;
  const ::im::push::PushMessageBody& body() const;
  PROTOBUF_NODISCARD ::im::push::PushMessageBody* release_body();
  ::im::push::PushMessageBody* mutable_body();
  void set_allocated_body(::im::push::PushMessageBody* value);
  void unsafe_arena_set_allocated_body(::im::push::PushMessageBody* value);
  ::im::push::PushMessageBody* unsafe_arena_release_body();

  private:
  const ::im::push::PushMessageBody& _internal_body() const;
  ::im::push::PushMessageBody* _internal_mutable_body();

  public:
  // @@protoc_insertion_point(class_scope:im.push.PushRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PushRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::im::base::IMHeader* header_;
    ::im::push::PushMessageBody* body_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_push_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PushMessageBody

// string push_id = 1;
inline void PushMessageBody::clear_push_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.push_id_.ClearToEmpty();
}
inline const std::string& PushMessageBody::push_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.push.PushMessageBody.push_id)
  return _internal_push_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PushMessageBody::set_push_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.push_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:im.push.PushMessageBody.push_id)
}
inline std::string* PushMessageBody::mutable_push_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_push_id();
  // @@protoc_insertion_point(field_mutable:im.push.PushMessageBody.push_id)
  return _s;
}
inline const std::string& PushMessageBody::_internal_push_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.push_id_.Get();
}
inline void PushMessageBody::_internal_set_push_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.push_id_.Set(value, GetArena());
}
inline std::string* PushMessageBody::_internal_mutable_push_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.push_id_.Mutable( GetArena());
}
inline std::string* PushMessageBody::release_push_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.push.PushMessageBody.push_id)
  return _impl_.push_id_.Release();
}
inline void PushMessageBody::set_allocated_push_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.push_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.push_id_.IsDefault()) {
    _impl_.push_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:im.push.PushMessageBody.push_id)
}

// .im.push.PushType type = 2;
inline void PushMessageBody::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::im::push::PushType PushMessageBody::type() const {
  // @@protoc_insertion_point(field_get:im.push.PushMessageBody.type)
  return _internal_type();
}
inline void PushMessageBody::set_type(::im::push::PushType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:im.push.PushMessageBody.type)
}
inline ::im::push::PushType PushMessageBody::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::im::push::PushType>(_impl_.type_);
}
inline void PushMessageBody::_internal_set_type(::im::push::PushType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// string content = 3;
inline void PushMessageBody::clear_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.ClearToEmpty();
}
inline const std::string& PushMessageBody::content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.push.PushMessageBody.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PushMessageBody::set_content(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:im.push.PushMessageBody.content)
}
inline std::string* PushMessageBody::mutable_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:im.push.PushMessageBody.content)
  return _s;
}
inline const std::string& PushMessageBody::_internal_content() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.content_.Get();
}
inline void PushMessageBody::_internal_set_content(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.Set(value, GetArena());
}
inline std::string* PushMessageBody::_internal_mutable_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.content_.Mutable( GetArena());
}
inline std::string* PushMessageBody::release_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.push.PushMessageBody.content)
  return _impl_.content_.Release();
}
inline void PushMessageBody::set_allocated_content(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:im.push.PushMessageBody.content)
}

// string related_message_id = 4;
inline void PushMessageBody::clear_related_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.related_message_id_.ClearToEmpty();
}
inline const std::string& PushMessageBody::related_message_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.push.PushMessageBody.related_message_id)
  return _internal_related_message_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PushMessageBody::set_related_message_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.related_message_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:im.push.PushMessageBody.related_message_id)
}
inline std::string* PushMessageBody::mutable_related_message_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_related_message_id();
  // @@protoc_insertion_point(field_mutable:im.push.PushMessageBody.related_message_id)
  return _s;
}
inline const std::string& PushMessageBody::_internal_related_message_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.related_message_id_.Get();
}
inline void PushMessageBody::_internal_set_related_message_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.related_message_id_.Set(value, GetArena());
}
inline std::string* PushMessageBody::_internal_mutable_related_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.related_message_id_.Mutable( GetArena());
}
inline std::string* PushMessageBody::release_related_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.push.PushMessageBody.related_message_id)
  return _impl_.related_message_id_.Release();
}
inline void PushMessageBody::set_allocated_related_message_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.related_message_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.related_message_id_.IsDefault()) {
    _impl_.related_message_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:im.push.PushMessageBody.related_message_id)
}

// string ext = 5;
inline void PushMessageBody::clear_ext() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ext_.ClearToEmpty();
}
inline const std::string& PushMessageBody::ext() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.push.PushMessageBody.ext)
  return _internal_ext();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PushMessageBody::set_ext(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ext_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:im.push.PushMessageBody.ext)
}
inline std::string* PushMessageBody::mutable_ext() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ext();
  // @@protoc_insertion_point(field_mutable:im.push.PushMessageBody.ext)
  return _s;
}
inline const std::string& PushMessageBody::_internal_ext() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ext_.Get();
}
inline void PushMessageBody::_internal_set_ext(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ext_.Set(value, GetArena());
}
inline std::string* PushMessageBody::_internal_mutable_ext() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.ext_.Mutable( GetArena());
}
inline std::string* PushMessageBody::release_ext() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.push.PushMessageBody.ext)
  return _impl_.ext_.Release();
}
inline void PushMessageBody::set_allocated_ext(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ext_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.ext_.IsDefault()) {
    _impl_.ext_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:im.push.PushMessageBody.ext)
}

// -------------------------------------------------------------------

// PushRequest

// .im.base.IMHeader header = 1;
inline bool PushRequest::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::im::base::IMHeader& PushRequest::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::im::base::IMHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::base::IMHeader&>(::im::base::_IMHeader_default_instance_);
}
inline const ::im::base::IMHeader& PushRequest::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.push.PushRequest.header)
  return _internal_header();
}
inline void PushRequest::unsafe_arena_set_allocated_header(::im::base::IMHeader* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::im::base::IMHeader*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.push.PushRequest.header)
}
inline ::im::base::IMHeader* PushRequest::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::IMHeader* released = _impl_.header_;
  _impl_.header_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::im::base::IMHeader* PushRequest::unsafe_arena_release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.push.PushRequest.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::IMHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::im::base::IMHeader* PushRequest::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::im::base::IMHeader>(GetArena());
    _impl_.header_ = reinterpret_cast<::im::base::IMHeader*>(p);
  }
  return _impl_.header_;
}
inline ::im::base::IMHeader* PushRequest::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::im::base::IMHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:im.push.PushRequest.header)
  return _msg;
}
inline void PushRequest::set_allocated_header(::im::base::IMHeader* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::im::base::IMHeader*>(value);
  // @@protoc_insertion_point(field_set_allocated:im.push.PushRequest.header)
}

// .im.push.PushMessageBody body = 2;
inline bool PushRequest::has_body() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.body_ != nullptr);
  return value;
}
inline void PushRequest::clear_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.body_ != nullptr) _impl_.body_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::im::push::PushMessageBody& PushRequest::_internal_body() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::im::push::PushMessageBody* p = _impl_.body_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::push::PushMessageBody&>(::im::push::_PushMessageBody_default_instance_);
}
inline const ::im::push::PushMessageBody& PushRequest::body() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.push.PushRequest.body)
  return _internal_body();
}
inline void PushRequest::unsafe_arena_set_allocated_body(::im::push::PushMessageBody* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.body_);
  }
  _impl_.body_ = reinterpret_cast<::im::push::PushMessageBody*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.push.PushRequest.body)
}
inline ::im::push::PushMessageBody* PushRequest::release_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::im::push::PushMessageBody* released = _impl_.body_;
  _impl_.body_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::im::push::PushMessageBody* PushRequest::unsafe_arena_release_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.push.PushRequest.body)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::im::push::PushMessageBody* temp = _impl_.body_;
  _impl_.body_ = nullptr;
  return temp;
}
inline ::im::push::PushMessageBody* PushRequest::_internal_mutable_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.body_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::im::push::PushMessageBody>(GetArena());
    _impl_.body_ = reinterpret_cast<::im::push::PushMessageBody*>(p);
  }
  return _impl_.body_;
}
inline ::im::push::PushMessageBody* PushRequest::mutable_body() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::im::push::PushMessageBody* _msg = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:im.push.PushRequest.body)
  return _msg;
}
inline void PushRequest::set_allocated_body(::im::push::PushMessageBody* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.body_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.body_ = reinterpret_cast<::im::push::PushMessageBody*>(value);
  // @@protoc_insertion_point(field_set_allocated:im.push.PushRequest.body)
}

// -------------------------------------------------------------------

// PushResponse

// .im.base.BaseResponse base = 1;
inline bool PushResponse::has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline const ::im::base::BaseResponse& PushResponse::_internal_base() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::im::base::BaseResponse* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::base::BaseResponse&>(::im::base::_BaseResponse_default_instance_);
}
inline const ::im::base::BaseResponse& PushResponse::base() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.push.PushResponse.base)
  return _internal_base();
}
inline void PushResponse::unsafe_arena_set_allocated_base(::im::base::BaseResponse* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = reinterpret_cast<::im::base::BaseResponse*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.push.PushResponse.base)
}
inline ::im::base::BaseResponse* PushResponse::release_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::BaseResponse* released = _impl_.base_;
  _impl_.base_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::im::base::BaseResponse* PushResponse::unsafe_arena_release_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.push.PushResponse.base)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::BaseResponse* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::im::base::BaseResponse* PushResponse::_internal_mutable_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.base_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::im::base::BaseResponse>(GetArena());
    _impl_.base_ = reinterpret_cast<::im::base::BaseResponse*>(p);
  }
  return _impl_.base_;
}
inline ::im::base::BaseResponse* PushResponse::mutable_base() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::im::base::BaseResponse* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:im.push.PushResponse.base)
  return _msg;
}
inline void PushResponse::set_allocated_base(::im::base::BaseResponse* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.base_ = reinterpret_cast<::im::base::BaseResponse*>(value);
  // @@protoc_insertion_point(field_set_allocated:im.push.PushResponse.base)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace push
}  // namespace im


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::im::push::PushType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::im::push::PushType>() {
  return ::im::push::PushType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // push_2eproto_2epb_2eh

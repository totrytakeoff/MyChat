// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: base.proto
// Protobuf C++ Version: 5.29.3

#ifndef base_2eproto_2epb_2eh
#define base_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_base_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_base_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_base_2eproto;
namespace im {
namespace base {
class BaseResponse;
struct BaseResponseDefaultTypeInternal;
extern BaseResponseDefaultTypeInternal _BaseResponse_default_instance_;
class IMHeader;
struct IMHeaderDefaultTypeInternal;
extern IMHeaderDefaultTypeInternal _IMHeader_default_instance_;
}  // namespace base
}  // namespace im
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace im {
namespace base {
enum ErrorCode : int {
  SUCCESS = 0,
  INVALID_REQUEST = 1,
  AUTH_FAILED = 2,
  NOT_FOUND = 3,
  PERMISSION_DENIED = 4,
  ALREADY_EXISTS = 5,
  PARAM_ERROR = 6,
  TIMEOUT = 7,
  SERVER_ERROR = 500,
  UNKNOWN_ERROR = 1000,
  ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ErrorCode_IsValid(int value);
extern const uint32_t ErrorCode_internal_data_[];
constexpr ErrorCode ErrorCode_MIN = static_cast<ErrorCode>(0);
constexpr ErrorCode ErrorCode_MAX = static_cast<ErrorCode>(1000);
constexpr int ErrorCode_ARRAYSIZE = 1000 + 1;
const ::google::protobuf::EnumDescriptor*
ErrorCode_descriptor();
template <typename T>
const std::string& ErrorCode_Name(T value) {
  static_assert(std::is_same<T, ErrorCode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ErrorCode_Name().");
  return ::google::protobuf::internal::NameOfEnum(ErrorCode_descriptor(), value);
}
inline bool ErrorCode_Parse(absl::string_view name, ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorCode>(
      ErrorCode_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class IMHeader final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:im.base.IMHeader) */ {
 public:
  inline IMHeader() : IMHeader(nullptr) {}
  ~IMHeader() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(IMHeader* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(IMHeader));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR IMHeader(
      ::google::protobuf::internal::ConstantInitialized);

  inline IMHeader(const IMHeader& from) : IMHeader(nullptr, from) {}
  inline IMHeader(IMHeader&& from) noexcept
      : IMHeader(nullptr, std::move(from)) {}
  inline IMHeader& operator=(const IMHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMHeader& operator=(IMHeader&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMHeader* internal_default_instance() {
    return reinterpret_cast<const IMHeader*>(
        &_IMHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(IMHeader& a, IMHeader& b) { a.Swap(&b); }
  inline void Swap(IMHeader* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMHeader* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IMHeader* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<IMHeader>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IMHeader& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const IMHeader& from) { IMHeader::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(IMHeader* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "im.base.IMHeader"; }

 protected:
  explicit IMHeader(::google::protobuf::Arena* arena);
  IMHeader(::google::protobuf::Arena* arena, const IMHeader& from);
  IMHeader(::google::protobuf::Arena* arena, IMHeader&& from) noexcept
      : IMHeader(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVersionFieldNumber = 1,
    kFromUidFieldNumber = 4,
    kToUidFieldNumber = 5,
    kTokenFieldNumber = 7,
    kDeviceIdFieldNumber = 8,
    kSeqFieldNumber = 2,
    kCmdIdFieldNumber = 3,
    kTimestampFieldNumber = 6,
  };
  // string version = 1;
  void clear_version() ;
  const std::string& version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* value);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // string from_uid = 4;
  void clear_from_uid() ;
  const std::string& from_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_from_uid(Arg_&& arg, Args_... args);
  std::string* mutable_from_uid();
  PROTOBUF_NODISCARD std::string* release_from_uid();
  void set_allocated_from_uid(std::string* value);

  private:
  const std::string& _internal_from_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from_uid(
      const std::string& value);
  std::string* _internal_mutable_from_uid();

  public:
  // string to_uid = 5;
  void clear_to_uid() ;
  const std::string& to_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_to_uid(Arg_&& arg, Args_... args);
  std::string* mutable_to_uid();
  PROTOBUF_NODISCARD std::string* release_to_uid();
  void set_allocated_to_uid(std::string* value);

  private:
  const std::string& _internal_to_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_uid(
      const std::string& value);
  std::string* _internal_mutable_to_uid();

  public:
  // string token = 7;
  void clear_token() ;
  const std::string& token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token(Arg_&& arg, Args_... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* value);

  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(
      const std::string& value);
  std::string* _internal_mutable_token();

  public:
  // string device_id = 8;
  void clear_device_id() ;
  const std::string& device_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_id(Arg_&& arg, Args_... args);
  std::string* mutable_device_id();
  PROTOBUF_NODISCARD std::string* release_device_id();
  void set_allocated_device_id(std::string* value);

  private:
  const std::string& _internal_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(
      const std::string& value);
  std::string* _internal_mutable_device_id();

  public:
  // uint32 seq = 2;
  void clear_seq() ;
  ::uint32_t seq() const;
  void set_seq(::uint32_t value);

  private:
  ::uint32_t _internal_seq() const;
  void _internal_set_seq(::uint32_t value);

  public:
  // uint32 cmd_id = 3;
  void clear_cmd_id() ;
  ::uint32_t cmd_id() const;
  void set_cmd_id(::uint32_t value);

  private:
  ::uint32_t _internal_cmd_id() const;
  void _internal_set_cmd_id(::uint32_t value);

  public:
  // uint64 timestamp = 6;
  void clear_timestamp() ;
  ::uint64_t timestamp() const;
  void set_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:im.base.IMHeader)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 0,
      68, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const IMHeader& from_msg);
    ::google::protobuf::internal::ArenaStringPtr version_;
    ::google::protobuf::internal::ArenaStringPtr from_uid_;
    ::google::protobuf::internal::ArenaStringPtr to_uid_;
    ::google::protobuf::internal::ArenaStringPtr token_;
    ::google::protobuf::internal::ArenaStringPtr device_id_;
    ::uint32_t seq_;
    ::uint32_t cmd_id_;
    ::uint64_t timestamp_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class BaseResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:im.base.BaseResponse) */ {
 public:
  inline BaseResponse() : BaseResponse(nullptr) {}
  ~BaseResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(BaseResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(BaseResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BaseResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline BaseResponse(const BaseResponse& from) : BaseResponse(nullptr, from) {}
  inline BaseResponse(BaseResponse&& from) noexcept
      : BaseResponse(nullptr, std::move(from)) {}
  inline BaseResponse& operator=(const BaseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseResponse& operator=(BaseResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BaseResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BaseResponse* internal_default_instance() {
    return reinterpret_cast<const BaseResponse*>(
        &_BaseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(BaseResponse& a, BaseResponse& b) { a.Swap(&b); }
  inline void Swap(BaseResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BaseResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<BaseResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BaseResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BaseResponse& from) { BaseResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(BaseResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "im.base.BaseResponse"; }

 protected:
  explicit BaseResponse(::google::protobuf::Arena* arena);
  BaseResponse(::google::protobuf::Arena* arena, const BaseResponse& from);
  BaseResponse(::google::protobuf::Arena* arena, BaseResponse&& from) noexcept
      : BaseResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kErrorMessageFieldNumber = 2,
    kPayloadFieldNumber = 3,
    kErrorCodeFieldNumber = 1,
  };
  // string error_message = 2;
  void clear_error_message() ;
  const std::string& error_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_message(Arg_&& arg, Args_... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* value);

  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(
      const std::string& value);
  std::string* _internal_mutable_error_message();

  public:
  // bytes payload = 3;
  void clear_payload() ;
  const std::string& payload() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_payload(Arg_&& arg, Args_... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* value);

  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(
      const std::string& value);
  std::string* _internal_mutable_payload();

  public:
  // .im.base.ErrorCode error_code = 1;
  void clear_error_code() ;
  ::im::base::ErrorCode error_code() const;
  void set_error_code(::im::base::ErrorCode value);

  private:
  ::im::base::ErrorCode _internal_error_code() const;
  void _internal_set_error_code(::im::base::ErrorCode value);

  public:
  // @@protoc_insertion_point(class_scope:im.base.BaseResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      42, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BaseResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr error_message_;
    ::google::protobuf::internal::ArenaStringPtr payload_;
    int error_code_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// IMHeader

// string version = 1;
inline void IMHeader::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.ClearToEmpty();
}
inline const std::string& IMHeader::version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.base.IMHeader.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IMHeader::set_version(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:im.base.IMHeader.version)
}
inline std::string* IMHeader::mutable_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:im.base.IMHeader.version)
  return _s;
}
inline const std::string& IMHeader::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_.Get();
}
inline void IMHeader::_internal_set_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.Set(value, GetArena());
}
inline std::string* IMHeader::_internal_mutable_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.version_.Mutable( GetArena());
}
inline std::string* IMHeader::release_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.base.IMHeader.version)
  return _impl_.version_.Release();
}
inline void IMHeader::set_allocated_version(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:im.base.IMHeader.version)
}

// uint32 seq = 2;
inline void IMHeader::clear_seq() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.seq_ = 0u;
}
inline ::uint32_t IMHeader::seq() const {
  // @@protoc_insertion_point(field_get:im.base.IMHeader.seq)
  return _internal_seq();
}
inline void IMHeader::set_seq(::uint32_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:im.base.IMHeader.seq)
}
inline ::uint32_t IMHeader::_internal_seq() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.seq_;
}
inline void IMHeader::_internal_set_seq(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.seq_ = value;
}

// uint32 cmd_id = 3;
inline void IMHeader::clear_cmd_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cmd_id_ = 0u;
}
inline ::uint32_t IMHeader::cmd_id() const {
  // @@protoc_insertion_point(field_get:im.base.IMHeader.cmd_id)
  return _internal_cmd_id();
}
inline void IMHeader::set_cmd_id(::uint32_t value) {
  _internal_set_cmd_id(value);
  // @@protoc_insertion_point(field_set:im.base.IMHeader.cmd_id)
}
inline ::uint32_t IMHeader::_internal_cmd_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cmd_id_;
}
inline void IMHeader::_internal_set_cmd_id(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cmd_id_ = value;
}

// string from_uid = 4;
inline void IMHeader::clear_from_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_uid_.ClearToEmpty();
}
inline const std::string& IMHeader::from_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.base.IMHeader.from_uid)
  return _internal_from_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IMHeader::set_from_uid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:im.base.IMHeader.from_uid)
}
inline std::string* IMHeader::mutable_from_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_from_uid();
  // @@protoc_insertion_point(field_mutable:im.base.IMHeader.from_uid)
  return _s;
}
inline const std::string& IMHeader::_internal_from_uid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.from_uid_.Get();
}
inline void IMHeader::_internal_set_from_uid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_uid_.Set(value, GetArena());
}
inline std::string* IMHeader::_internal_mutable_from_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.from_uid_.Mutable( GetArena());
}
inline std::string* IMHeader::release_from_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.base.IMHeader.from_uid)
  return _impl_.from_uid_.Release();
}
inline void IMHeader::set_allocated_from_uid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_uid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.from_uid_.IsDefault()) {
    _impl_.from_uid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:im.base.IMHeader.from_uid)
}

// string to_uid = 5;
inline void IMHeader::clear_to_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_uid_.ClearToEmpty();
}
inline const std::string& IMHeader::to_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.base.IMHeader.to_uid)
  return _internal_to_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IMHeader::set_to_uid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:im.base.IMHeader.to_uid)
}
inline std::string* IMHeader::mutable_to_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_to_uid();
  // @@protoc_insertion_point(field_mutable:im.base.IMHeader.to_uid)
  return _s;
}
inline const std::string& IMHeader::_internal_to_uid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.to_uid_.Get();
}
inline void IMHeader::_internal_set_to_uid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_uid_.Set(value, GetArena());
}
inline std::string* IMHeader::_internal_mutable_to_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.to_uid_.Mutable( GetArena());
}
inline std::string* IMHeader::release_to_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.base.IMHeader.to_uid)
  return _impl_.to_uid_.Release();
}
inline void IMHeader::set_allocated_to_uid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_uid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.to_uid_.IsDefault()) {
    _impl_.to_uid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:im.base.IMHeader.to_uid)
}

// uint64 timestamp = 6;
inline void IMHeader::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = ::uint64_t{0u};
}
inline ::uint64_t IMHeader::timestamp() const {
  // @@protoc_insertion_point(field_get:im.base.IMHeader.timestamp)
  return _internal_timestamp();
}
inline void IMHeader::set_timestamp(::uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:im.base.IMHeader.timestamp)
}
inline ::uint64_t IMHeader::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void IMHeader::_internal_set_timestamp(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// string token = 7;
inline void IMHeader::clear_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.ClearToEmpty();
}
inline const std::string& IMHeader::token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.base.IMHeader.token)
  return _internal_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IMHeader::set_token(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:im.base.IMHeader.token)
}
inline std::string* IMHeader::mutable_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:im.base.IMHeader.token)
  return _s;
}
inline const std::string& IMHeader::_internal_token() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.token_.Get();
}
inline void IMHeader::_internal_set_token(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.Set(value, GetArena());
}
inline std::string* IMHeader::_internal_mutable_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.token_.Mutable( GetArena());
}
inline std::string* IMHeader::release_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.base.IMHeader.token)
  return _impl_.token_.Release();
}
inline void IMHeader::set_allocated_token(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:im.base.IMHeader.token)
}

// string device_id = 8;
inline void IMHeader::clear_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.ClearToEmpty();
}
inline const std::string& IMHeader::device_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.base.IMHeader.device_id)
  return _internal_device_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IMHeader::set_device_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:im.base.IMHeader.device_id)
}
inline std::string* IMHeader::mutable_device_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_device_id();
  // @@protoc_insertion_point(field_mutable:im.base.IMHeader.device_id)
  return _s;
}
inline const std::string& IMHeader::_internal_device_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.device_id_.Get();
}
inline void IMHeader::_internal_set_device_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.Set(value, GetArena());
}
inline std::string* IMHeader::_internal_mutable_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.device_id_.Mutable( GetArena());
}
inline std::string* IMHeader::release_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.base.IMHeader.device_id)
  return _impl_.device_id_.Release();
}
inline void IMHeader::set_allocated_device_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.device_id_.IsDefault()) {
    _impl_.device_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:im.base.IMHeader.device_id)
}

// -------------------------------------------------------------------

// BaseResponse

// .im.base.ErrorCode error_code = 1;
inline void BaseResponse::clear_error_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_code_ = 0;
}
inline ::im::base::ErrorCode BaseResponse::error_code() const {
  // @@protoc_insertion_point(field_get:im.base.BaseResponse.error_code)
  return _internal_error_code();
}
inline void BaseResponse::set_error_code(::im::base::ErrorCode value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:im.base.BaseResponse.error_code)
}
inline ::im::base::ErrorCode BaseResponse::_internal_error_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::im::base::ErrorCode>(_impl_.error_code_);
}
inline void BaseResponse::_internal_set_error_code(::im::base::ErrorCode value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_code_ = value;
}

// string error_message = 2;
inline void BaseResponse::clear_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& BaseResponse::error_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.base.BaseResponse.error_message)
  return _internal_error_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BaseResponse::set_error_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:im.base.BaseResponse.error_message)
}
inline std::string* BaseResponse::mutable_error_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:im.base.BaseResponse.error_message)
  return _s;
}
inline const std::string& BaseResponse::_internal_error_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_message_.Get();
}
inline void BaseResponse::_internal_set_error_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(value, GetArena());
}
inline std::string* BaseResponse::_internal_mutable_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.error_message_.Mutable( GetArena());
}
inline std::string* BaseResponse::release_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.base.BaseResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void BaseResponse::set_allocated_error_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:im.base.BaseResponse.error_message)
}

// bytes payload = 3;
inline void BaseResponse::clear_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& BaseResponse::payload() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.base.BaseResponse.payload)
  return _internal_payload();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BaseResponse::set_payload(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:im.base.BaseResponse.payload)
}
inline std::string* BaseResponse::mutable_payload() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:im.base.BaseResponse.payload)
  return _s;
}
inline const std::string& BaseResponse::_internal_payload() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.payload_.Get();
}
inline void BaseResponse::_internal_set_payload(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_.Set(value, GetArena());
}
inline std::string* BaseResponse::_internal_mutable_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.payload_.Mutable( GetArena());
}
inline std::string* BaseResponse::release_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.base.BaseResponse.payload)
  return _impl_.payload_.Release();
}
inline void BaseResponse::set_allocated_payload(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.payload_.IsDefault()) {
    _impl_.payload_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:im.base.BaseResponse.payload)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace base
}  // namespace im


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::im::base::ErrorCode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::im::base::ErrorCode>() {
  return ::im::base::ErrorCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // base_2eproto_2epb_2eh

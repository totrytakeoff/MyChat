// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: codec_service.proto

#include "codec_service.pb.h"
#include "codec_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace im {
namespace codec {

static const char* CodecService_method_names[] = {
  "/im.codec.CodecService/Encode",
  "/im.codec.CodecService/Decode",
};

std::unique_ptr< CodecService::Stub> CodecService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CodecService::Stub> stub(new CodecService::Stub(channel, options));
  return stub;
}

CodecService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Encode_(CodecService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Decode_(CodecService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CodecService::Stub::Encode(::grpc::ClientContext* context, const ::im::codec::EncodeRequest& request, ::im::codec::EncodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::im::codec::EncodeRequest, ::im::codec::EncodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Encode_, context, request, response);
}

void CodecService::Stub::async::Encode(::grpc::ClientContext* context, const ::im::codec::EncodeRequest* request, ::im::codec::EncodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::im::codec::EncodeRequest, ::im::codec::EncodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Encode_, context, request, response, std::move(f));
}

void CodecService::Stub::async::Encode(::grpc::ClientContext* context, const ::im::codec::EncodeRequest* request, ::im::codec::EncodeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Encode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::im::codec::EncodeResponse>* CodecService::Stub::PrepareAsyncEncodeRaw(::grpc::ClientContext* context, const ::im::codec::EncodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::im::codec::EncodeResponse, ::im::codec::EncodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Encode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::im::codec::EncodeResponse>* CodecService::Stub::AsyncEncodeRaw(::grpc::ClientContext* context, const ::im::codec::EncodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEncodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CodecService::Stub::Decode(::grpc::ClientContext* context, const ::im::codec::DecodeRequest& request, ::im::codec::DecodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::im::codec::DecodeRequest, ::im::codec::DecodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Decode_, context, request, response);
}

void CodecService::Stub::async::Decode(::grpc::ClientContext* context, const ::im::codec::DecodeRequest* request, ::im::codec::DecodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::im::codec::DecodeRequest, ::im::codec::DecodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Decode_, context, request, response, std::move(f));
}

void CodecService::Stub::async::Decode(::grpc::ClientContext* context, const ::im::codec::DecodeRequest* request, ::im::codec::DecodeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Decode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::im::codec::DecodeResponse>* CodecService::Stub::PrepareAsyncDecodeRaw(::grpc::ClientContext* context, const ::im::codec::DecodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::im::codec::DecodeResponse, ::im::codec::DecodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Decode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::im::codec::DecodeResponse>* CodecService::Stub::AsyncDecodeRaw(::grpc::ClientContext* context, const ::im::codec::DecodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDecodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

CodecService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CodecService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CodecService::Service, ::im::codec::EncodeRequest, ::im::codec::EncodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CodecService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::im::codec::EncodeRequest* req,
             ::im::codec::EncodeResponse* resp) {
               return service->Encode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CodecService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CodecService::Service, ::im::codec::DecodeRequest, ::im::codec::DecodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CodecService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::im::codec::DecodeRequest* req,
             ::im::codec::DecodeResponse* resp) {
               return service->Decode(ctx, req, resp);
             }, this)));
}

CodecService::Service::~Service() {
}

::grpc::Status CodecService::Service::Encode(::grpc::ServerContext* context, const ::im::codec::EncodeRequest* request, ::im::codec::EncodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CodecService::Service::Decode(::grpc::ServerContext* context, const ::im::codec::DecodeRequest* request, ::im::codec::DecodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace im
}  // namespace codec


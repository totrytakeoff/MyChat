// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: codec_service.proto
// Protobuf C++ Version: 5.29.3

#ifndef codec_5fservice_2eproto_2epb_2eh
#define codec_5fservice_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "base.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_codec_5fservice_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_codec_5fservice_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_codec_5fservice_2eproto;
namespace im {
namespace codec {
class DecodeRequest;
struct DecodeRequestDefaultTypeInternal;
extern DecodeRequestDefaultTypeInternal _DecodeRequest_default_instance_;
class DecodeResponse;
struct DecodeResponseDefaultTypeInternal;
extern DecodeResponseDefaultTypeInternal _DecodeResponse_default_instance_;
class EncodeRequest;
struct EncodeRequestDefaultTypeInternal;
extern EncodeRequestDefaultTypeInternal _EncodeRequest_default_instance_;
class EncodeResponse;
struct EncodeResponseDefaultTypeInternal;
extern EncodeResponseDefaultTypeInternal _EncodeResponse_default_instance_;
}  // namespace codec
}  // namespace im
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace im {
namespace codec {

// ===================================================================


// -------------------------------------------------------------------

class EncodeResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:im.codec.EncodeResponse) */ {
 public:
  inline EncodeResponse() : EncodeResponse(nullptr) {}
  ~EncodeResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EncodeResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EncodeResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EncodeResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline EncodeResponse(const EncodeResponse& from) : EncodeResponse(nullptr, from) {}
  inline EncodeResponse(EncodeResponse&& from) noexcept
      : EncodeResponse(nullptr, std::move(from)) {}
  inline EncodeResponse& operator=(const EncodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncodeResponse& operator=(EncodeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EncodeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const EncodeResponse* internal_default_instance() {
    return reinterpret_cast<const EncodeResponse*>(
        &_EncodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(EncodeResponse& a, EncodeResponse& b) { a.Swap(&b); }
  inline void Swap(EncodeResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncodeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EncodeResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EncodeResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EncodeResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EncodeResponse& from) { EncodeResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EncodeResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "im.codec.EncodeResponse"; }

 protected:
  explicit EncodeResponse(::google::protobuf::Arena* arena);
  EncodeResponse(::google::protobuf::Arena* arena, const EncodeResponse& from);
  EncodeResponse(::google::protobuf::Arena* arena, EncodeResponse&& from) noexcept
      : EncodeResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kErrorMessageFieldNumber = 2,
    kEncodedDataFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // string error_message = 2;
  void clear_error_message() ;
  const std::string& error_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_message(Arg_&& arg, Args_... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* value);

  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(
      const std::string& value);
  std::string* _internal_mutable_error_message();

  public:
  // bytes encoded_data = 3;
  void clear_encoded_data() ;
  const std::string& encoded_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_encoded_data(Arg_&& arg, Args_... args);
  std::string* mutable_encoded_data();
  PROTOBUF_NODISCARD std::string* release_encoded_data();
  void set_allocated_encoded_data(std::string* value);

  private:
  const std::string& _internal_encoded_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encoded_data(
      const std::string& value);
  std::string* _internal_mutable_encoded_data();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:im.codec.EncodeResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      45, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EncodeResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr error_message_;
    ::google::protobuf::internal::ArenaStringPtr encoded_data_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_codec_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DecodeRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:im.codec.DecodeRequest) */ {
 public:
  inline DecodeRequest() : DecodeRequest(nullptr) {}
  ~DecodeRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DecodeRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DecodeRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DecodeRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline DecodeRequest(const DecodeRequest& from) : DecodeRequest(nullptr, from) {}
  inline DecodeRequest(DecodeRequest&& from) noexcept
      : DecodeRequest(nullptr, std::move(from)) {}
  inline DecodeRequest& operator=(const DecodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DecodeRequest& operator=(DecodeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DecodeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DecodeRequest* internal_default_instance() {
    return reinterpret_cast<const DecodeRequest*>(
        &_DecodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(DecodeRequest& a, DecodeRequest& b) { a.Swap(&b); }
  inline void Swap(DecodeRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DecodeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DecodeRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DecodeRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DecodeRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DecodeRequest& from) { DecodeRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DecodeRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "im.codec.DecodeRequest"; }

 protected:
  explicit DecodeRequest(::google::protobuf::Arena* arena);
  DecodeRequest(::google::protobuf::Arena* arena, const DecodeRequest& from);
  DecodeRequest(::google::protobuf::Arena* arena, DecodeRequest&& from) noexcept
      : DecodeRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEncodedDataFieldNumber = 1,
  };
  // bytes encoded_data = 1;
  void clear_encoded_data() ;
  const std::string& encoded_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_encoded_data(Arg_&& arg, Args_... args);
  std::string* mutable_encoded_data();
  PROTOBUF_NODISCARD std::string* release_encoded_data();
  void set_allocated_encoded_data(std::string* value);

  private:
  const std::string& _internal_encoded_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encoded_data(
      const std::string& value);
  std::string* _internal_mutable_encoded_data();

  public:
  // @@protoc_insertion_point(class_scope:im.codec.DecodeRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DecodeRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr encoded_data_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_codec_5fservice_2eproto;
};
// -------------------------------------------------------------------

class EncodeRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:im.codec.EncodeRequest) */ {
 public:
  inline EncodeRequest() : EncodeRequest(nullptr) {}
  ~EncodeRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EncodeRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EncodeRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EncodeRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline EncodeRequest(const EncodeRequest& from) : EncodeRequest(nullptr, from) {}
  inline EncodeRequest(EncodeRequest&& from) noexcept
      : EncodeRequest(nullptr, std::move(from)) {}
  inline EncodeRequest& operator=(const EncodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncodeRequest& operator=(EncodeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EncodeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EncodeRequest* internal_default_instance() {
    return reinterpret_cast<const EncodeRequest*>(
        &_EncodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(EncodeRequest& a, EncodeRequest& b) { a.Swap(&b); }
  inline void Swap(EncodeRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncodeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EncodeRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EncodeRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EncodeRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EncodeRequest& from) { EncodeRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EncodeRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "im.codec.EncodeRequest"; }

 protected:
  explicit EncodeRequest(::google::protobuf::Arena* arena);
  EncodeRequest(::google::protobuf::Arena* arena, const EncodeRequest& from);
  EncodeRequest(::google::protobuf::Arena* arena, EncodeRequest&& from) noexcept
      : EncodeRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageDataFieldNumber = 2,
    kMessageTypeNameFieldNumber = 3,
    kHeaderFieldNumber = 1,
  };
  // bytes message_data = 2;
  void clear_message_data() ;
  const std::string& message_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message_data(Arg_&& arg, Args_... args);
  std::string* mutable_message_data();
  PROTOBUF_NODISCARD std::string* release_message_data();
  void set_allocated_message_data(std::string* value);

  private:
  const std::string& _internal_message_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_data(
      const std::string& value);
  std::string* _internal_mutable_message_data();

  public:
  // string message_type_name = 3;
  void clear_message_type_name() ;
  const std::string& message_type_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message_type_name(Arg_&& arg, Args_... args);
  std::string* mutable_message_type_name();
  PROTOBUF_NODISCARD std::string* release_message_type_name();
  void set_allocated_message_type_name(std::string* value);

  private:
  const std::string& _internal_message_type_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_type_name(
      const std::string& value);
  std::string* _internal_mutable_message_type_name();

  public:
  // .im.base.IMHeader header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::im::base::IMHeader& header() const;
  PROTOBUF_NODISCARD ::im::base::IMHeader* release_header();
  ::im::base::IMHeader* mutable_header();
  void set_allocated_header(::im::base::IMHeader* value);
  void unsafe_arena_set_allocated_header(::im::base::IMHeader* value);
  ::im::base::IMHeader* unsafe_arena_release_header();

  private:
  const ::im::base::IMHeader& _internal_header() const;
  ::im::base::IMHeader* _internal_mutable_header();

  public:
  // @@protoc_insertion_point(class_scope:im.codec.EncodeRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      48, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EncodeRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr message_data_;
    ::google::protobuf::internal::ArenaStringPtr message_type_name_;
    ::im::base::IMHeader* header_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_codec_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DecodeResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:im.codec.DecodeResponse) */ {
 public:
  inline DecodeResponse() : DecodeResponse(nullptr) {}
  ~DecodeResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DecodeResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DecodeResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DecodeResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline DecodeResponse(const DecodeResponse& from) : DecodeResponse(nullptr, from) {}
  inline DecodeResponse(DecodeResponse&& from) noexcept
      : DecodeResponse(nullptr, std::move(from)) {}
  inline DecodeResponse& operator=(const DecodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DecodeResponse& operator=(DecodeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DecodeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DecodeResponse* internal_default_instance() {
    return reinterpret_cast<const DecodeResponse*>(
        &_DecodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(DecodeResponse& a, DecodeResponse& b) { a.Swap(&b); }
  inline void Swap(DecodeResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DecodeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DecodeResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DecodeResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DecodeResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DecodeResponse& from) { DecodeResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DecodeResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "im.codec.DecodeResponse"; }

 protected:
  explicit DecodeResponse(::google::protobuf::Arena* arena);
  DecodeResponse(::google::protobuf::Arena* arena, const DecodeResponse& from);
  DecodeResponse(::google::protobuf::Arena* arena, DecodeResponse&& from) noexcept
      : DecodeResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kErrorMessageFieldNumber = 2,
    kMessageDataFieldNumber = 4,
    kMessageTypeNameFieldNumber = 5,
    kHeaderFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // string error_message = 2;
  void clear_error_message() ;
  const std::string& error_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_message(Arg_&& arg, Args_... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* value);

  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(
      const std::string& value);
  std::string* _internal_mutable_error_message();

  public:
  // bytes message_data = 4;
  void clear_message_data() ;
  const std::string& message_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message_data(Arg_&& arg, Args_... args);
  std::string* mutable_message_data();
  PROTOBUF_NODISCARD std::string* release_message_data();
  void set_allocated_message_data(std::string* value);

  private:
  const std::string& _internal_message_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_data(
      const std::string& value);
  std::string* _internal_mutable_message_data();

  public:
  // string message_type_name = 5;
  void clear_message_type_name() ;
  const std::string& message_type_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message_type_name(Arg_&& arg, Args_... args);
  std::string* mutable_message_type_name();
  PROTOBUF_NODISCARD std::string* release_message_type_name();
  void set_allocated_message_type_name(std::string* value);

  private:
  const std::string& _internal_message_type_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_type_name(
      const std::string& value);
  std::string* _internal_mutable_message_type_name();

  public:
  // .im.base.IMHeader header = 3;
  bool has_header() const;
  void clear_header() ;
  const ::im::base::IMHeader& header() const;
  PROTOBUF_NODISCARD ::im::base::IMHeader* release_header();
  ::im::base::IMHeader* mutable_header();
  void set_allocated_header(::im::base::IMHeader* value);
  void unsafe_arena_set_allocated_header(::im::base::IMHeader* value);
  ::im::base::IMHeader* unsafe_arena_release_header();

  private:
  const ::im::base::IMHeader& _internal_header() const;
  ::im::base::IMHeader* _internal_mutable_header();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:im.codec.DecodeResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      62, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DecodeResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr error_message_;
    ::google::protobuf::internal::ArenaStringPtr message_data_;
    ::google::protobuf::internal::ArenaStringPtr message_type_name_;
    ::im::base::IMHeader* header_;
    bool success_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_codec_5fservice_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// EncodeRequest

// .im.base.IMHeader header = 1;
inline bool EncodeRequest::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::im::base::IMHeader& EncodeRequest::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::im::base::IMHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::base::IMHeader&>(::im::base::_IMHeader_default_instance_);
}
inline const ::im::base::IMHeader& EncodeRequest::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.codec.EncodeRequest.header)
  return _internal_header();
}
inline void EncodeRequest::unsafe_arena_set_allocated_header(::im::base::IMHeader* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::im::base::IMHeader*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.codec.EncodeRequest.header)
}
inline ::im::base::IMHeader* EncodeRequest::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::IMHeader* released = _impl_.header_;
  _impl_.header_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::im::base::IMHeader* EncodeRequest::unsafe_arena_release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.codec.EncodeRequest.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::IMHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::im::base::IMHeader* EncodeRequest::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::im::base::IMHeader>(GetArena());
    _impl_.header_ = reinterpret_cast<::im::base::IMHeader*>(p);
  }
  return _impl_.header_;
}
inline ::im::base::IMHeader* EncodeRequest::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::im::base::IMHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:im.codec.EncodeRequest.header)
  return _msg;
}
inline void EncodeRequest::set_allocated_header(::im::base::IMHeader* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::im::base::IMHeader*>(value);
  // @@protoc_insertion_point(field_set_allocated:im.codec.EncodeRequest.header)
}

// bytes message_data = 2;
inline void EncodeRequest::clear_message_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_data_.ClearToEmpty();
}
inline const std::string& EncodeRequest::message_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.codec.EncodeRequest.message_data)
  return _internal_message_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EncodeRequest::set_message_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:im.codec.EncodeRequest.message_data)
}
inline std::string* EncodeRequest::mutable_message_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message_data();
  // @@protoc_insertion_point(field_mutable:im.codec.EncodeRequest.message_data)
  return _s;
}
inline const std::string& EncodeRequest::_internal_message_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_data_.Get();
}
inline void EncodeRequest::_internal_set_message_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_data_.Set(value, GetArena());
}
inline std::string* EncodeRequest::_internal_mutable_message_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_data_.Mutable( GetArena());
}
inline std::string* EncodeRequest::release_message_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.codec.EncodeRequest.message_data)
  return _impl_.message_data_.Release();
}
inline void EncodeRequest::set_allocated_message_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_data_.IsDefault()) {
    _impl_.message_data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:im.codec.EncodeRequest.message_data)
}

// string message_type_name = 3;
inline void EncodeRequest::clear_message_type_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_type_name_.ClearToEmpty();
}
inline const std::string& EncodeRequest::message_type_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.codec.EncodeRequest.message_type_name)
  return _internal_message_type_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EncodeRequest::set_message_type_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_type_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:im.codec.EncodeRequest.message_type_name)
}
inline std::string* EncodeRequest::mutable_message_type_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message_type_name();
  // @@protoc_insertion_point(field_mutable:im.codec.EncodeRequest.message_type_name)
  return _s;
}
inline const std::string& EncodeRequest::_internal_message_type_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_type_name_.Get();
}
inline void EncodeRequest::_internal_set_message_type_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_type_name_.Set(value, GetArena());
}
inline std::string* EncodeRequest::_internal_mutable_message_type_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_type_name_.Mutable( GetArena());
}
inline std::string* EncodeRequest::release_message_type_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.codec.EncodeRequest.message_type_name)
  return _impl_.message_type_name_.Release();
}
inline void EncodeRequest::set_allocated_message_type_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_type_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_type_name_.IsDefault()) {
    _impl_.message_type_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:im.codec.EncodeRequest.message_type_name)
}

// -------------------------------------------------------------------

// EncodeResponse

// bool success = 1;
inline void EncodeResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool EncodeResponse::success() const {
  // @@protoc_insertion_point(field_get:im.codec.EncodeResponse.success)
  return _internal_success();
}
inline void EncodeResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:im.codec.EncodeResponse.success)
}
inline bool EncodeResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void EncodeResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string error_message = 2;
inline void EncodeResponse::clear_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& EncodeResponse::error_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.codec.EncodeResponse.error_message)
  return _internal_error_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EncodeResponse::set_error_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:im.codec.EncodeResponse.error_message)
}
inline std::string* EncodeResponse::mutable_error_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:im.codec.EncodeResponse.error_message)
  return _s;
}
inline const std::string& EncodeResponse::_internal_error_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_message_.Get();
}
inline void EncodeResponse::_internal_set_error_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(value, GetArena());
}
inline std::string* EncodeResponse::_internal_mutable_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.error_message_.Mutable( GetArena());
}
inline std::string* EncodeResponse::release_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.codec.EncodeResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void EncodeResponse::set_allocated_error_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:im.codec.EncodeResponse.error_message)
}

// bytes encoded_data = 3;
inline void EncodeResponse::clear_encoded_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encoded_data_.ClearToEmpty();
}
inline const std::string& EncodeResponse::encoded_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.codec.EncodeResponse.encoded_data)
  return _internal_encoded_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EncodeResponse::set_encoded_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encoded_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:im.codec.EncodeResponse.encoded_data)
}
inline std::string* EncodeResponse::mutable_encoded_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_encoded_data();
  // @@protoc_insertion_point(field_mutable:im.codec.EncodeResponse.encoded_data)
  return _s;
}
inline const std::string& EncodeResponse::_internal_encoded_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.encoded_data_.Get();
}
inline void EncodeResponse::_internal_set_encoded_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encoded_data_.Set(value, GetArena());
}
inline std::string* EncodeResponse::_internal_mutable_encoded_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.encoded_data_.Mutable( GetArena());
}
inline std::string* EncodeResponse::release_encoded_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.codec.EncodeResponse.encoded_data)
  return _impl_.encoded_data_.Release();
}
inline void EncodeResponse::set_allocated_encoded_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encoded_data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.encoded_data_.IsDefault()) {
    _impl_.encoded_data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:im.codec.EncodeResponse.encoded_data)
}

// -------------------------------------------------------------------

// DecodeRequest

// bytes encoded_data = 1;
inline void DecodeRequest::clear_encoded_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encoded_data_.ClearToEmpty();
}
inline const std::string& DecodeRequest::encoded_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.codec.DecodeRequest.encoded_data)
  return _internal_encoded_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DecodeRequest::set_encoded_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encoded_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:im.codec.DecodeRequest.encoded_data)
}
inline std::string* DecodeRequest::mutable_encoded_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_encoded_data();
  // @@protoc_insertion_point(field_mutable:im.codec.DecodeRequest.encoded_data)
  return _s;
}
inline const std::string& DecodeRequest::_internal_encoded_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.encoded_data_.Get();
}
inline void DecodeRequest::_internal_set_encoded_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encoded_data_.Set(value, GetArena());
}
inline std::string* DecodeRequest::_internal_mutable_encoded_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.encoded_data_.Mutable( GetArena());
}
inline std::string* DecodeRequest::release_encoded_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.codec.DecodeRequest.encoded_data)
  return _impl_.encoded_data_.Release();
}
inline void DecodeRequest::set_allocated_encoded_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encoded_data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.encoded_data_.IsDefault()) {
    _impl_.encoded_data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:im.codec.DecodeRequest.encoded_data)
}

// -------------------------------------------------------------------

// DecodeResponse

// bool success = 1;
inline void DecodeResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool DecodeResponse::success() const {
  // @@protoc_insertion_point(field_get:im.codec.DecodeResponse.success)
  return _internal_success();
}
inline void DecodeResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:im.codec.DecodeResponse.success)
}
inline bool DecodeResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void DecodeResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string error_message = 2;
inline void DecodeResponse::clear_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& DecodeResponse::error_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.codec.DecodeResponse.error_message)
  return _internal_error_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DecodeResponse::set_error_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:im.codec.DecodeResponse.error_message)
}
inline std::string* DecodeResponse::mutable_error_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:im.codec.DecodeResponse.error_message)
  return _s;
}
inline const std::string& DecodeResponse::_internal_error_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_message_.Get();
}
inline void DecodeResponse::_internal_set_error_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(value, GetArena());
}
inline std::string* DecodeResponse::_internal_mutable_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.error_message_.Mutable( GetArena());
}
inline std::string* DecodeResponse::release_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.codec.DecodeResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void DecodeResponse::set_allocated_error_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:im.codec.DecodeResponse.error_message)
}

// .im.base.IMHeader header = 3;
inline bool DecodeResponse::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::im::base::IMHeader& DecodeResponse::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::im::base::IMHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::base::IMHeader&>(::im::base::_IMHeader_default_instance_);
}
inline const ::im::base::IMHeader& DecodeResponse::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.codec.DecodeResponse.header)
  return _internal_header();
}
inline void DecodeResponse::unsafe_arena_set_allocated_header(::im::base::IMHeader* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::im::base::IMHeader*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.codec.DecodeResponse.header)
}
inline ::im::base::IMHeader* DecodeResponse::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::IMHeader* released = _impl_.header_;
  _impl_.header_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::im::base::IMHeader* DecodeResponse::unsafe_arena_release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.codec.DecodeResponse.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::base::IMHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::im::base::IMHeader* DecodeResponse::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::im::base::IMHeader>(GetArena());
    _impl_.header_ = reinterpret_cast<::im::base::IMHeader*>(p);
  }
  return _impl_.header_;
}
inline ::im::base::IMHeader* DecodeResponse::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::im::base::IMHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:im.codec.DecodeResponse.header)
  return _msg;
}
inline void DecodeResponse::set_allocated_header(::im::base::IMHeader* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::im::base::IMHeader*>(value);
  // @@protoc_insertion_point(field_set_allocated:im.codec.DecodeResponse.header)
}

// bytes message_data = 4;
inline void DecodeResponse::clear_message_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_data_.ClearToEmpty();
}
inline const std::string& DecodeResponse::message_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.codec.DecodeResponse.message_data)
  return _internal_message_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DecodeResponse::set_message_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:im.codec.DecodeResponse.message_data)
}
inline std::string* DecodeResponse::mutable_message_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message_data();
  // @@protoc_insertion_point(field_mutable:im.codec.DecodeResponse.message_data)
  return _s;
}
inline const std::string& DecodeResponse::_internal_message_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_data_.Get();
}
inline void DecodeResponse::_internal_set_message_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_data_.Set(value, GetArena());
}
inline std::string* DecodeResponse::_internal_mutable_message_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_data_.Mutable( GetArena());
}
inline std::string* DecodeResponse::release_message_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.codec.DecodeResponse.message_data)
  return _impl_.message_data_.Release();
}
inline void DecodeResponse::set_allocated_message_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_data_.IsDefault()) {
    _impl_.message_data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:im.codec.DecodeResponse.message_data)
}

// string message_type_name = 5;
inline void DecodeResponse::clear_message_type_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_type_name_.ClearToEmpty();
}
inline const std::string& DecodeResponse::message_type_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:im.codec.DecodeResponse.message_type_name)
  return _internal_message_type_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DecodeResponse::set_message_type_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_type_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:im.codec.DecodeResponse.message_type_name)
}
inline std::string* DecodeResponse::mutable_message_type_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message_type_name();
  // @@protoc_insertion_point(field_mutable:im.codec.DecodeResponse.message_type_name)
  return _s;
}
inline const std::string& DecodeResponse::_internal_message_type_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_type_name_.Get();
}
inline void DecodeResponse::_internal_set_message_type_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_type_name_.Set(value, GetArena());
}
inline std::string* DecodeResponse::_internal_mutable_message_type_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_type_name_.Mutable( GetArena());
}
inline std::string* DecodeResponse::release_message_type_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:im.codec.DecodeResponse.message_type_name)
  return _impl_.message_type_name_.Release();
}
inline void DecodeResponse::set_allocated_message_type_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_type_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_type_name_.IsDefault()) {
    _impl_.message_type_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:im.codec.DecodeResponse.message_type_name)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace codec
}  // namespace im


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // codec_5fservice_2eproto_2epb_2eh
